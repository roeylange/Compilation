     1                                  ;;; prologue-1.asm
     2                                  ;;; The first part of the standard prologue for compiled programs
     3                                  ;;;
     4                                  ;;; Programmer: Mayer Goldberg, 2023
     5                                  
     6                                  %define T_void 				0
     7                                  %define T_nil 				1
     8                                  %define T_char 				2
     9                                  %define T_string 			3
    10                                  %define T_closure 			4
    11                                  %define T_undefined			5
    12                                  %define T_boolean 			8
    13                                  %define T_boolean_false 		(T_boolean | 1)
    14                                  %define T_boolean_true 			(T_boolean | 2)
    15                                  %define T_number 			16
    16                                  %define T_integer			(T_number | 1)
    17                                  %define T_fraction 			(T_number | 2)
    18                                  %define T_real 				(T_number | 3)
    19                                  %define T_collection 			32
    20                                  %define T_pair 				(T_collection | 1)
    21                                  %define T_vector 			(T_collection | 2)
    22                                  %define T_symbol 			64
    23                                  %define T_interned_symbol		(T_symbol | 1)
    24                                  %define T_uninterned_symbol		(T_symbol | 2)
    25                                  
    26                                  %define SOB_CHAR_VALUE(reg) 		byte [reg + 1]
    27                                  %define SOB_PAIR_CAR(reg)		qword [reg + 1]
    28                                  %define SOB_PAIR_CDR(reg)		qword [reg + 1 + 8]
    29                                  %define SOB_STRING_LENGTH(reg)		qword [reg + 1]
    30                                  %define SOB_VECTOR_LENGTH(reg)		qword [reg + 1]
    31                                  %define SOB_CLOSURE_ENV(reg)		qword [reg + 1]
    32                                  %define SOB_CLOSURE_CODE(reg)		qword [reg + 1 + 8]
    33                                  
    34                                  %define OLD_RDP 			qword [rbp]
    35                                  %define RET_ADDR 			qword [rbp + 8 * 1]
    36                                  %define ENV 				qword [rbp + 8 * 2]
    37                                  %define COUNT 				qword [rbp + 8 * 3]
    38                                  %define PARAM(n) 			qword [rbp + 8 * (4 + n)]
    39                                  %define AND_KILL_FRAME(n)		(8 * (2 + n))
    40                                  
    41                                  %define MAGIC				496351
    42                                  
    43                                  %macro ENTER 0
    44                                  	enter 0, 0
    45                                  	and rsp, ~15
    46                                  %endmacro
    47                                  
    48                                  %macro LEAVE 0
    49                                  	leave
    50                                  %endmacro
    51                                  
    52                                  %macro assert_type 2
    53                                          cmp byte [%1], %2
    54                                          jne L_error_incorrect_type
    55                                  %endmacro
    56                                  
    57                                  %define assert_void(reg)		assert_type reg, T_void
    58                                  %define assert_nil(reg)			assert_type reg, T_nil
    59                                  %define assert_char(reg)		assert_type reg, T_char
    60                                  %define assert_string(reg)		assert_type reg, T_string
    61                                  %define assert_symbol(reg)		assert_type reg, T_symbol
    62                                  %define assert_interned_symbol(reg)	assert_type reg, T_interned_symbol
    63                                  %define assert_uninterned_symbol(reg)	assert_type reg, T_uninterned_symbol
    64                                  %define assert_closure(reg)		assert_type reg, T_closure
    65                                  %define assert_boolean(reg)		assert_type reg, T_boolean
    66                                  %define assert_integer(reg)		assert_type reg, T_integer
    67                                  %define assert_fraction(reg)		assert_type reg, T_fraction
    68                                  %define assert_real(reg)		assert_type reg, T_real
    69                                  %define assert_pair(reg)		assert_type reg, T_pair
    70                                  %define assert_vector(reg)		assert_type reg, T_vector
    71                                  
    72                                  %define sob_void			(L_constants + 0)
    73                                  %define sob_nil				(L_constants + 1)
    74                                  %define sob_boolean_false		(L_constants + 2)
    75                                  %define sob_boolean_true		(L_constants + 3)
    76                                  %define sob_char_nul			(L_constants + 4)
    77                                  
    78                                  %define bytes(n)			(n)
    79                                  %define kbytes(n) 			(bytes(n) << 10)
    80                                  %define mbytes(n) 			(kbytes(n) << 10)
    81                                  %define gbytes(n) 			(mbytes(n) << 10)
    82                                  
    83                                  section .data
    84                                  L_constants:
    85                                  	; L_constants + 0:
    86 00000000 00                      	db T_void
    87                                  	; L_constants + 1:
    88 00000001 01                      	db T_nil
    89                                  	; L_constants + 2:
    90 00000002 09                      	db T_boolean_false
    91                                  	; L_constants + 3:
    92 00000003 0A                      	db T_boolean_true
    93                                  	; L_constants + 4:
    94 00000004 0200                    	db T_char, 0x00	; #\nul
    95                                  	; L_constants + 6:
    96 00000006 03                      	db T_string	; "null?"
    97 00000007 0500000000000000        	dq 5
    98 0000000F 6E756C6C3F              	db 0x6E, 0x75, 0x6C, 0x6C, 0x3F
    99                                  	; L_constants + 20:
   100 00000014 03                      	db T_string	; "pair?"
   101 00000015 0500000000000000        	dq 5
   102 0000001D 706169723F              	db 0x70, 0x61, 0x69, 0x72, 0x3F
   103                                  	; L_constants + 34:
   104 00000022 03                      	db T_string	; "void?"
   105 00000023 0500000000000000        	dq 5
   106 0000002B 766F69643F              	db 0x76, 0x6F, 0x69, 0x64, 0x3F
   107                                  	; L_constants + 48:
   108 00000030 03                      	db T_string	; "char?"
   109 00000031 0500000000000000        	dq 5
   110 00000039 636861723F              	db 0x63, 0x68, 0x61, 0x72, 0x3F
   111                                  	; L_constants + 62:
   112 0000003E 03                      	db T_string	; "string?"
   113 0000003F 0700000000000000        	dq 7
   114 00000047 737472696E673F          	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x3F
   115                                  	; L_constants + 78:
   116 0000004E 03                      	db T_string	; "interned-symbol?"
   117 0000004F 1000000000000000        	dq 16
   118 00000057 696E7465726E6564        	db 0x69, 0x6E, 0x74, 0x65, 0x72, 0x6E, 0x65, 0x64
   119 0000005F 2D73796D626F6C3F        	db 0x2D, 0x73, 0x79, 0x6D, 0x62, 0x6F, 0x6C, 0x3F
   120                                  	; L_constants + 103:
   121 00000067 03                      	db T_string	; "vector?"
   122 00000068 0700000000000000        	dq 7
   123 00000070 766563746F723F          	db 0x76, 0x65, 0x63, 0x74, 0x6F, 0x72, 0x3F
   124                                  	; L_constants + 119:
   125 00000077 03                      	db T_string	; "procedure?"
   126 00000078 0A00000000000000        	dq 10
   127 00000080 70726F6365647572        	db 0x70, 0x72, 0x6F, 0x63, 0x65, 0x64, 0x75, 0x72
   128 00000088 653F                    	db 0x65, 0x3F
   129                                  	; L_constants + 138:
   130 0000008A 03                      	db T_string	; "real?"
   131 0000008B 0500000000000000        	dq 5
   132 00000093 7265616C3F              	db 0x72, 0x65, 0x61, 0x6C, 0x3F
   133                                  	; L_constants + 152:
   134 00000098 03                      	db T_string	; "fraction?"
   135 00000099 0900000000000000        	dq 9
   136 000000A1 6672616374696F6E        	db 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6F, 0x6E
   137 000000A9 3F                      	db 0x3F
   138                                  	; L_constants + 170:
   139 000000AA 03                      	db T_string	; "boolean?"
   140 000000AB 0800000000000000        	dq 8
   141 000000B3 626F6F6C65616E3F        	db 0x62, 0x6F, 0x6F, 0x6C, 0x65, 0x61, 0x6E, 0x3F
   142                                  	; L_constants + 187:
   143 000000BB 03                      	db T_string	; "number?"
   144 000000BC 0700000000000000        	dq 7
   145 000000C4 6E756D6265723F          	db 0x6E, 0x75, 0x6D, 0x62, 0x65, 0x72, 0x3F
   146                                  	; L_constants + 203:
   147 000000CB 03                      	db T_string	; "collection?"
   148 000000CC 0B00000000000000        	dq 11
   149 000000D4 636F6C6C65637469        	db 0x63, 0x6F, 0x6C, 0x6C, 0x65, 0x63, 0x74, 0x69
   150 000000DC 6F6E3F                  	db 0x6F, 0x6E, 0x3F
   151                                  	; L_constants + 223:
   152 000000DF 03                      	db T_string	; "cons"
   153 000000E0 0400000000000000        	dq 4
   154 000000E8 636F6E73                	db 0x63, 0x6F, 0x6E, 0x73
   155                                  	; L_constants + 236:
   156 000000EC 03                      	db T_string	; "display-sexpr"
   157 000000ED 0D00000000000000        	dq 13
   158 000000F5 646973706C61792D        	db 0x64, 0x69, 0x73, 0x70, 0x6C, 0x61, 0x79, 0x2D
   159 000000FD 7365787072              	db 0x73, 0x65, 0x78, 0x70, 0x72
   160                                  	; L_constants + 258:
   161 00000102 03                      	db T_string	; "write-char"
   162 00000103 0A00000000000000        	dq 10
   163 0000010B 77726974652D6368        	db 0x77, 0x72, 0x69, 0x74, 0x65, 0x2D, 0x63, 0x68
   164 00000113 6172                    	db 0x61, 0x72
   165                                  	; L_constants + 277:
   166 00000115 03                      	db T_string	; "car"
   167 00000116 0300000000000000        	dq 3
   168 0000011E 636172                  	db 0x63, 0x61, 0x72
   169                                  	; L_constants + 289:
   170 00000121 03                      	db T_string	; "cdr"
   171 00000122 0300000000000000        	dq 3
   172 0000012A 636472                  	db 0x63, 0x64, 0x72
   173                                  	; L_constants + 301:
   174 0000012D 03                      	db T_string	; "string-length"
   175 0000012E 0D00000000000000        	dq 13
   176 00000136 737472696E672D6C        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2D, 0x6C
   177 0000013E 656E677468              	db 0x65, 0x6E, 0x67, 0x74, 0x68
   178                                  	; L_constants + 323:
   179 00000143 03                      	db T_string	; "vector-length"
   180 00000144 0D00000000000000        	dq 13
   181 0000014C 766563746F722D6C        	db 0x76, 0x65, 0x63, 0x74, 0x6F, 0x72, 0x2D, 0x6C
   182 00000154 656E677468              	db 0x65, 0x6E, 0x67, 0x74, 0x68
   183                                  	; L_constants + 345:
   184 00000159 03                      	db T_string	; "real->integer"
   185 0000015A 0D00000000000000        	dq 13
   186 00000162 7265616C2D3E696E        	db 0x72, 0x65, 0x61, 0x6C, 0x2D, 0x3E, 0x69, 0x6E
   187 0000016A 7465676572              	db 0x74, 0x65, 0x67, 0x65, 0x72
   188                                  	; L_constants + 367:
   189 0000016F 03                      	db T_string	; "exit"
   190 00000170 0400000000000000        	dq 4
   191 00000178 65786974                	db 0x65, 0x78, 0x69, 0x74
   192                                  	; L_constants + 380:
   193 0000017C 03                      	db T_string	; "integer->real"
   194 0000017D 0D00000000000000        	dq 13
   195 00000185 696E74656765722D        	db 0x69, 0x6E, 0x74, 0x65, 0x67, 0x65, 0x72, 0x2D
   196 0000018D 3E7265616C              	db 0x3E, 0x72, 0x65, 0x61, 0x6C
   197                                  	; L_constants + 402:
   198 00000192 03                      	db T_string	; "fraction->real"
   199 00000193 0E00000000000000        	dq 14
   200 0000019B 6672616374696F6E        	db 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6F, 0x6E
   201 000001A3 2D3E7265616C            	db 0x2D, 0x3E, 0x72, 0x65, 0x61, 0x6C
   202                                  	; L_constants + 425:
   203 000001A9 03                      	db T_string	; "char->integer"
   204 000001AA 0D00000000000000        	dq 13
   205 000001B2 636861722D3E696E        	db 0x63, 0x68, 0x61, 0x72, 0x2D, 0x3E, 0x69, 0x6E
   206 000001BA 7465676572              	db 0x74, 0x65, 0x67, 0x65, 0x72
   207                                  	; L_constants + 447:
   208 000001BF 03                      	db T_string	; "integer->char"
   209 000001C0 0D00000000000000        	dq 13
   210 000001C8 696E74656765722D        	db 0x69, 0x6E, 0x74, 0x65, 0x67, 0x65, 0x72, 0x2D
   211 000001D0 3E63686172              	db 0x3E, 0x63, 0x68, 0x61, 0x72
   212                                  	; L_constants + 469:
   213 000001D5 03                      	db T_string	; "trng"
   214 000001D6 0400000000000000        	dq 4
   215 000001DE 74726E67                	db 0x74, 0x72, 0x6E, 0x67
   216                                  	; L_constants + 482:
   217 000001E2 03                      	db T_string	; "zero?"
   218 000001E3 0500000000000000        	dq 5
   219 000001EB 7A65726F3F              	db 0x7A, 0x65, 0x72, 0x6F, 0x3F
   220                                  	; L_constants + 496:
   221 000001F0 03                      	db T_string	; "integer?"
   222 000001F1 0800000000000000        	dq 8
   223 000001F9 696E74656765723F        	db 0x69, 0x6E, 0x74, 0x65, 0x67, 0x65, 0x72, 0x3F
   224                                  	; L_constants + 513:
   225 00000201 03                      	db T_string	; "__bin-apply"
   226 00000202 0B00000000000000        	dq 11
   227 0000020A 5F5F62696E2D6170        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x61, 0x70
   228 00000212 706C79                  	db 0x70, 0x6C, 0x79
   229                                  	; L_constants + 533:
   230 00000215 03                      	db T_string	; "__bin-add-rr"
   231 00000216 0C00000000000000        	dq 12
   232 0000021E 5F5F62696E2D6164        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x61, 0x64
   233 00000226 642D7272                	db 0x64, 0x2D, 0x72, 0x72
   234                                  	; L_constants + 554:
   235 0000022A 03                      	db T_string	; "__bin-sub-rr"
   236 0000022B 0C00000000000000        	dq 12
   237 00000233 5F5F62696E2D7375        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x73, 0x75
   238 0000023B 622D7272                	db 0x62, 0x2D, 0x72, 0x72
   239                                  	; L_constants + 575:
   240 0000023F 03                      	db T_string	; "__bin-mul-rr"
   241 00000240 0C00000000000000        	dq 12
   242 00000248 5F5F62696E2D6D75        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x6D, 0x75
   243 00000250 6C2D7272                	db 0x6C, 0x2D, 0x72, 0x72
   244                                  	; L_constants + 596:
   245 00000254 03                      	db T_string	; "__bin-div-rr"
   246 00000255 0C00000000000000        	dq 12
   247 0000025D 5F5F62696E2D6469        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x64, 0x69
   248 00000265 762D7272                	db 0x76, 0x2D, 0x72, 0x72
   249                                  	; L_constants + 617:
   250 00000269 03                      	db T_string	; "__bin-add-qq"
   251 0000026A 0C00000000000000        	dq 12
   252 00000272 5F5F62696E2D6164        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x61, 0x64
   253 0000027A 642D7171                	db 0x64, 0x2D, 0x71, 0x71
   254                                  	; L_constants + 638:
   255 0000027E 03                      	db T_string	; "__bin-sub-qq"
   256 0000027F 0C00000000000000        	dq 12
   257 00000287 5F5F62696E2D7375        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x73, 0x75
   258 0000028F 622D7171                	db 0x62, 0x2D, 0x71, 0x71
   259                                  	; L_constants + 659:
   260 00000293 03                      	db T_string	; "__bin-mul-qq"
   261 00000294 0C00000000000000        	dq 12
   262 0000029C 5F5F62696E2D6D75        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x6D, 0x75
   263 000002A4 6C2D7171                	db 0x6C, 0x2D, 0x71, 0x71
   264                                  	; L_constants + 680:
   265 000002A8 03                      	db T_string	; "__bin-div-qq"
   266 000002A9 0C00000000000000        	dq 12
   267 000002B1 5F5F62696E2D6469        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x64, 0x69
   268 000002B9 762D7171                	db 0x76, 0x2D, 0x71, 0x71
   269                                  	; L_constants + 701:
   270 000002BD 03                      	db T_string	; "__bin-add-zz"
   271 000002BE 0C00000000000000        	dq 12
   272 000002C6 5F5F62696E2D6164        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x61, 0x64
   273 000002CE 642D7A7A                	db 0x64, 0x2D, 0x7A, 0x7A
   274                                  	; L_constants + 722:
   275 000002D2 03                      	db T_string	; "__bin-sub-zz"
   276 000002D3 0C00000000000000        	dq 12
   277 000002DB 5F5F62696E2D7375        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x73, 0x75
   278 000002E3 622D7A7A                	db 0x62, 0x2D, 0x7A, 0x7A
   279                                  	; L_constants + 743:
   280 000002E7 03                      	db T_string	; "__bin-mul-zz"
   281 000002E8 0C00000000000000        	dq 12
   282 000002F0 5F5F62696E2D6D75        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x6D, 0x75
   283 000002F8 6C2D7A7A                	db 0x6C, 0x2D, 0x7A, 0x7A
   284                                  	; L_constants + 764:
   285 000002FC 03                      	db T_string	; "__bin-div-zz"
   286 000002FD 0C00000000000000        	dq 12
   287 00000305 5F5F62696E2D6469        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x64, 0x69
   288 0000030D 762D7A7A                	db 0x76, 0x2D, 0x7A, 0x7A
   289                                  	; L_constants + 785:
   290 00000311 03                      	db T_string	; "error"
   291 00000312 0500000000000000        	dq 5
   292 0000031A 6572726F72              	db 0x65, 0x72, 0x72, 0x6F, 0x72
   293                                  	; L_constants + 799:
   294 0000031F 03                      	db T_string	; "__bin-less-than-rr"
   295 00000320 1200000000000000        	dq 18
   296 00000328 5F5F62696E2D6C65        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x6C, 0x65
   297 00000330 73732D7468616E2D        	db 0x73, 0x73, 0x2D, 0x74, 0x68, 0x61, 0x6E, 0x2D
   298 00000338 7272                    	db 0x72, 0x72
   299                                  	; L_constants + 826:
   300 0000033A 03                      	db T_string	; "__bin-less-than-qq"
   301 0000033B 1200000000000000        	dq 18
   302 00000343 5F5F62696E2D6C65        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x6C, 0x65
   303 0000034B 73732D7468616E2D        	db 0x73, 0x73, 0x2D, 0x74, 0x68, 0x61, 0x6E, 0x2D
   304 00000353 7171                    	db 0x71, 0x71
   305                                  	; L_constants + 853:
   306 00000355 03                      	db T_string	; "__bin-less-than-zz"
   307 00000356 1200000000000000        	dq 18
   308 0000035E 5F5F62696E2D6C65        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x6C, 0x65
   309 00000366 73732D7468616E2D        	db 0x73, 0x73, 0x2D, 0x74, 0x68, 0x61, 0x6E, 0x2D
   310 0000036E 7A7A                    	db 0x7A, 0x7A
   311                                  	; L_constants + 880:
   312 00000370 03                      	db T_string	; "__bin-equal-rr"
   313 00000371 0E00000000000000        	dq 14
   314 00000379 5F5F62696E2D6571        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x65, 0x71
   315 00000381 75616C2D7272            	db 0x75, 0x61, 0x6C, 0x2D, 0x72, 0x72
   316                                  	; L_constants + 903:
   317 00000387 03                      	db T_string	; "__bin-equal-qq"
   318 00000388 0E00000000000000        	dq 14
   319 00000390 5F5F62696E2D6571        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x65, 0x71
   320 00000398 75616C2D7171            	db 0x75, 0x61, 0x6C, 0x2D, 0x71, 0x71
   321                                  	; L_constants + 926:
   322 0000039E 03                      	db T_string	; "__bin-equal-zz"
   323 0000039F 0E00000000000000        	dq 14
   324 000003A7 5F5F62696E2D6571        	db 0x5F, 0x5F, 0x62, 0x69, 0x6E, 0x2D, 0x65, 0x71
   325 000003AF 75616C2D7A7A            	db 0x75, 0x61, 0x6C, 0x2D, 0x7A, 0x7A
   326                                  	; L_constants + 949:
   327 000003B5 03                      	db T_string	; "quotient"
   328 000003B6 0800000000000000        	dq 8
   329 000003BE 71756F7469656E74        	db 0x71, 0x75, 0x6F, 0x74, 0x69, 0x65, 0x6E, 0x74
   330                                  	; L_constants + 966:
   331 000003C6 03                      	db T_string	; "remainder"
   332 000003C7 0900000000000000        	dq 9
   333 000003CF 72656D61696E6465        	db 0x72, 0x65, 0x6D, 0x61, 0x69, 0x6E, 0x64, 0x65
   334 000003D7 72                      	db 0x72
   335                                  	; L_constants + 984:
   336 000003D8 03                      	db T_string	; "set-car!"
   337 000003D9 0800000000000000        	dq 8
   338 000003E1 7365742D63617221        	db 0x73, 0x65, 0x74, 0x2D, 0x63, 0x61, 0x72, 0x21
   339                                  	; L_constants + 1001:
   340 000003E9 03                      	db T_string	; "set-cdr!"
   341 000003EA 0800000000000000        	dq 8
   342 000003F2 7365742D63647221        	db 0x73, 0x65, 0x74, 0x2D, 0x63, 0x64, 0x72, 0x21
   343                                  	; L_constants + 1018:
   344 000003FA 03                      	db T_string	; "string-ref"
   345 000003FB 0A00000000000000        	dq 10
   346 00000403 737472696E672D72        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2D, 0x72
   347 0000040B 6566                    	db 0x65, 0x66
   348                                  	; L_constants + 1037:
   349 0000040D 03                      	db T_string	; "vector-ref"
   350 0000040E 0A00000000000000        	dq 10
   351 00000416 766563746F722D72        	db 0x76, 0x65, 0x63, 0x74, 0x6F, 0x72, 0x2D, 0x72
   352 0000041E 6566                    	db 0x65, 0x66
   353                                  	; L_constants + 1056:
   354 00000420 03                      	db T_string	; "vector-set!"
   355 00000421 0B00000000000000        	dq 11
   356 00000429 766563746F722D73        	db 0x76, 0x65, 0x63, 0x74, 0x6F, 0x72, 0x2D, 0x73
   357 00000431 657421                  	db 0x65, 0x74, 0x21
   358                                  	; L_constants + 1076:
   359 00000434 03                      	db T_string	; "string-set!"
   360 00000435 0B00000000000000        	dq 11
   361 0000043D 737472696E672D73        	db 0x73, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x2D, 0x73
   362 00000445 657421                  	db 0x65, 0x74, 0x21
   363                                  	; L_constants + 1096:
   364 00000448 03                      	db T_string	; "make-vector"
   365 00000449 0B00000000000000        	dq 11
   366 00000451 6D616B652D766563        	db 0x6D, 0x61, 0x6B, 0x65, 0x2D, 0x76, 0x65, 0x63
   367 00000459 746F72                  	db 0x74, 0x6F, 0x72
   368                                  	; L_constants + 1116:
   369 0000045C 03                      	db T_string	; "make-string"
   370 0000045D 0B00000000000000        	dq 11
   371 00000465 6D616B652D737472        	db 0x6D, 0x61, 0x6B, 0x65, 0x2D, 0x73, 0x74, 0x72
   372 0000046D 696E67                  	db 0x69, 0x6E, 0x67
   373                                  	; L_constants + 1136:
   374 00000470 03                      	db T_string	; "numerator"
   375 00000471 0900000000000000        	dq 9
   376 00000479 6E756D657261746F        	db 0x6E, 0x75, 0x6D, 0x65, 0x72, 0x61, 0x74, 0x6F
   377 00000481 72                      	db 0x72
   378                                  	; L_constants + 1154:
   379 00000482 03                      	db T_string	; "denominator"
   380 00000483 0B00000000000000        	dq 11
   381 0000048B 64656E6F6D696E61        	db 0x64, 0x65, 0x6E, 0x6F, 0x6D, 0x69, 0x6E, 0x61
   382 00000493 746F72                  	db 0x74, 0x6F, 0x72
   383                                  	; L_constants + 1174:
   384 00000496 03                      	db T_string	; "eq?"
   385 00000497 0300000000000000        	dq 3
   386 0000049F 65713F                  	db 0x65, 0x71, 0x3F
   387                                  	; L_constants + 1186:
   388 000004A2 03                      	db T_string	; "__integer-to-fracti...
   389 000004A3 1500000000000000        	dq 21
   390 000004AB 5F5F696E74656765        	db 0x5F, 0x5F, 0x69, 0x6E, 0x74, 0x65, 0x67, 0x65
   391 000004B3 722D746F2D667261        	db 0x72, 0x2D, 0x74, 0x6F, 0x2D, 0x66, 0x72, 0x61
   392 000004BB 6374696F6E              	db 0x63, 0x74, 0x69, 0x6F, 0x6E
   393                                  	; L_constants + 1216:
   394 000004C0 03                      	db T_string	; "logand"
   395 000004C1 0600000000000000        	dq 6
   396 000004C9 6C6F67616E64            	db 0x6C, 0x6F, 0x67, 0x61, 0x6E, 0x64
   397                                  	; L_constants + 1231:
   398 000004CF 03                      	db T_string	; "logor"
   399 000004D0 0500000000000000        	dq 5
   400 000004D8 6C6F676F72              	db 0x6C, 0x6F, 0x67, 0x6F, 0x72
   401                                  	; L_constants + 1245:
   402 000004DD 03                      	db T_string	; "logxor"
   403 000004DE 0600000000000000        	dq 6
   404 000004E6 6C6F67786F72            	db 0x6C, 0x6F, 0x67, 0x78, 0x6F, 0x72
   405                                  	; L_constants + 1260:
   406 000004EC 03                      	db T_string	; "lognot"
   407 000004ED 0600000000000000        	dq 6
   408 000004F5 6C6F676E6F74            	db 0x6C, 0x6F, 0x67, 0x6E, 0x6F, 0x74
   409                                  	; L_constants + 1275:
   410 000004FB 03                      	db T_string	; "ash"
   411 000004FC 0300000000000000        	dq 3
   412 00000504 617368                  	db 0x61, 0x73, 0x68
   413                                  	; L_constants + 1287:
   414 00000507 03                      	db T_string	; "symbol?"
   415 00000508 0700000000000000        	dq 7
   416 00000510 73796D626F6C3F          	db 0x73, 0x79, 0x6D, 0x62, 0x6F, 0x6C, 0x3F
   417                                  	; L_constants + 1303:
   418 00000517 03                      	db T_string	; "uninterned-symbol?"
   419 00000518 1200000000000000        	dq 18
   420 00000520 756E696E7465726E        	db 0x75, 0x6E, 0x69, 0x6E, 0x74, 0x65, 0x72, 0x6E
   421 00000528 65642D73796D626F        	db 0x65, 0x64, 0x2D, 0x73, 0x79, 0x6D, 0x62, 0x6F
   422 00000530 6C3F                    	db 0x6C, 0x3F
   423                                  	; L_constants + 1330:
   424 00000532 03                      	db T_string	; "gensym?"
   425 00000533 0700000000000000        	dq 7
   426 0000053B 67656E73796D3F          	db 0x67, 0x65, 0x6E, 0x73, 0x79, 0x6D, 0x3F
   427                                  	; L_constants + 1346:
   428 00000542 03                      	db T_string	; "gensym"
   429 00000543 0600000000000000        	dq 6
   430 0000054B 67656E73796D            	db 0x67, 0x65, 0x6E, 0x73, 0x79, 0x6D
   431                                  	; L_constants + 1361:
   432 00000551 03                      	db T_string	; "frame"
   433 00000552 0500000000000000        	dq 5
   434 0000055A 6672616D65              	db 0x66, 0x72, 0x61, 0x6D, 0x65
   435                                  	; L_constants + 1375:
   436 0000055F 03                      	db T_string	; "break"
   437 00000560 0500000000000000        	dq 5
   438 00000568 627265616B              	db 0x62, 0x72, 0x65, 0x61, 0x6B
   439                                  	; L_constants + 1389:
   440 0000056D 03                      	db T_string	; "x"
   441 0000056E 0100000000000000        	dq 1
   442 00000576 78                      	db 0x78
   443                                  	; L_constants + 1399:
   444 00000577 11                      	db T_integer	; 1
   445 00000578 0100000000000000        	dq 1
   446                                  	; L_constants + 1408:
   447 00000580 03                      	db T_string	; "y"
   448 00000581 0100000000000000        	dq 1
   449 00000589 79                      	db 0x79
   450                                  free_var_0:	; location of null?
   451 0000058A [9205000000000000]      	dq .undefined_object
   452                                  .undefined_object:
   453 00000592 05                      	db T_undefined
   454 00000593 [0600000000000000]      	dq L_constants + 6
   455                                  
   456                                  free_var_1:	; location of pair?
   457 0000059B [A305000000000000]      	dq .undefined_object
   458                                  .undefined_object:
   459 000005A3 05                      	db T_undefined
   460 000005A4 [1400000000000000]      	dq L_constants + 20
   461                                  
   462                                  free_var_2:	; location of void?
   463 000005AC [B405000000000000]      	dq .undefined_object
   464                                  .undefined_object:
   465 000005B4 05                      	db T_undefined
   466 000005B5 [2200000000000000]      	dq L_constants + 34
   467                                  
   468                                  free_var_3:	; location of char?
   469 000005BD [C505000000000000]      	dq .undefined_object
   470                                  .undefined_object:
   471 000005C5 05                      	db T_undefined
   472 000005C6 [3000000000000000]      	dq L_constants + 48
   473                                  
   474                                  free_var_4:	; location of string?
   475 000005CE [D605000000000000]      	dq .undefined_object
   476                                  .undefined_object:
   477 000005D6 05                      	db T_undefined
   478 000005D7 [3E00000000000000]      	dq L_constants + 62
   479                                  
   480                                  free_var_5:	; location of interned-symbol?
   481 000005DF [E705000000000000]      	dq .undefined_object
   482                                  .undefined_object:
   483 000005E7 05                      	db T_undefined
   484 000005E8 [4E00000000000000]      	dq L_constants + 78
   485                                  
   486                                  free_var_6:	; location of vector?
   487 000005F0 [F805000000000000]      	dq .undefined_object
   488                                  .undefined_object:
   489 000005F8 05                      	db T_undefined
   490 000005F9 [6700000000000000]      	dq L_constants + 103
   491                                  
   492                                  free_var_7:	; location of procedure?
   493 00000601 [0906000000000000]      	dq .undefined_object
   494                                  .undefined_object:
   495 00000609 05                      	db T_undefined
   496 0000060A [7700000000000000]      	dq L_constants + 119
   497                                  
   498                                  free_var_8:	; location of real?
   499 00000612 [1A06000000000000]      	dq .undefined_object
   500                                  .undefined_object:
   501 0000061A 05                      	db T_undefined
   502 0000061B [8A00000000000000]      	dq L_constants + 138
   503                                  
   504                                  free_var_9:	; location of fraction?
   505 00000623 [2B06000000000000]      	dq .undefined_object
   506                                  .undefined_object:
   507 0000062B 05                      	db T_undefined
   508 0000062C [9800000000000000]      	dq L_constants + 152
   509                                  
   510                                  free_var_10:	; location of boolean?
   511 00000634 [3C06000000000000]      	dq .undefined_object
   512                                  .undefined_object:
   513 0000063C 05                      	db T_undefined
   514 0000063D [AA00000000000000]      	dq L_constants + 170
   515                                  
   516                                  free_var_11:	; location of number?
   517 00000645 [4D06000000000000]      	dq .undefined_object
   518                                  .undefined_object:
   519 0000064D 05                      	db T_undefined
   520 0000064E [BB00000000000000]      	dq L_constants + 187
   521                                  
   522                                  free_var_12:	; location of collection?
   523 00000656 [5E06000000000000]      	dq .undefined_object
   524                                  .undefined_object:
   525 0000065E 05                      	db T_undefined
   526 0000065F [CB00000000000000]      	dq L_constants + 203
   527                                  
   528                                  free_var_13:	; location of cons
   529 00000667 [6F06000000000000]      	dq .undefined_object
   530                                  .undefined_object:
   531 0000066F 05                      	db T_undefined
   532 00000670 [DF00000000000000]      	dq L_constants + 223
   533                                  
   534                                  free_var_14:	; location of display-sexpr
   535 00000678 [8006000000000000]      	dq .undefined_object
   536                                  .undefined_object:
   537 00000680 05                      	db T_undefined
   538 00000681 [EC00000000000000]      	dq L_constants + 236
   539                                  
   540                                  free_var_15:	; location of write-char
   541 00000689 [9106000000000000]      	dq .undefined_object
   542                                  .undefined_object:
   543 00000691 05                      	db T_undefined
   544 00000692 [0201000000000000]      	dq L_constants + 258
   545                                  
   546                                  free_var_16:	; location of car
   547 0000069A [A206000000000000]      	dq .undefined_object
   548                                  .undefined_object:
   549 000006A2 05                      	db T_undefined
   550 000006A3 [1501000000000000]      	dq L_constants + 277
   551                                  
   552                                  free_var_17:	; location of cdr
   553 000006AB [B306000000000000]      	dq .undefined_object
   554                                  .undefined_object:
   555 000006B3 05                      	db T_undefined
   556 000006B4 [2101000000000000]      	dq L_constants + 289
   557                                  
   558                                  free_var_18:	; location of string-length
   559 000006BC [C406000000000000]      	dq .undefined_object
   560                                  .undefined_object:
   561 000006C4 05                      	db T_undefined
   562 000006C5 [2D01000000000000]      	dq L_constants + 301
   563                                  
   564                                  free_var_19:	; location of vector-length
   565 000006CD [D506000000000000]      	dq .undefined_object
   566                                  .undefined_object:
   567 000006D5 05                      	db T_undefined
   568 000006D6 [4301000000000000]      	dq L_constants + 323
   569                                  
   570                                  free_var_20:	; location of real->integer
   571 000006DE [E606000000000000]      	dq .undefined_object
   572                                  .undefined_object:
   573 000006E6 05                      	db T_undefined
   574 000006E7 [5901000000000000]      	dq L_constants + 345
   575                                  
   576                                  free_var_21:	; location of exit
   577 000006EF [F706000000000000]      	dq .undefined_object
   578                                  .undefined_object:
   579 000006F7 05                      	db T_undefined
   580 000006F8 [6F01000000000000]      	dq L_constants + 367
   581                                  
   582                                  free_var_22:	; location of integer->real
   583 00000700 [0807000000000000]      	dq .undefined_object
   584                                  .undefined_object:
   585 00000708 05                      	db T_undefined
   586 00000709 [7C01000000000000]      	dq L_constants + 380
   587                                  
   588                                  free_var_23:	; location of fraction->real
   589 00000711 [1907000000000000]      	dq .undefined_object
   590                                  .undefined_object:
   591 00000719 05                      	db T_undefined
   592 0000071A [9201000000000000]      	dq L_constants + 402
   593                                  
   594                                  free_var_24:	; location of char->integer
   595 00000722 [2A07000000000000]      	dq .undefined_object
   596                                  .undefined_object:
   597 0000072A 05                      	db T_undefined
   598 0000072B [A901000000000000]      	dq L_constants + 425
   599                                  
   600                                  free_var_25:	; location of integer->char
   601 00000733 [3B07000000000000]      	dq .undefined_object
   602                                  .undefined_object:
   603 0000073B 05                      	db T_undefined
   604 0000073C [BF01000000000000]      	dq L_constants + 447
   605                                  
   606                                  free_var_26:	; location of trng
   607 00000744 [4C07000000000000]      	dq .undefined_object
   608                                  .undefined_object:
   609 0000074C 05                      	db T_undefined
   610 0000074D [D501000000000000]      	dq L_constants + 469
   611                                  
   612                                  free_var_27:	; location of zero?
   613 00000755 [5D07000000000000]      	dq .undefined_object
   614                                  .undefined_object:
   615 0000075D 05                      	db T_undefined
   616 0000075E [E201000000000000]      	dq L_constants + 482
   617                                  
   618                                  free_var_28:	; location of integer?
   619 00000766 [6E07000000000000]      	dq .undefined_object
   620                                  .undefined_object:
   621 0000076E 05                      	db T_undefined
   622 0000076F [F001000000000000]      	dq L_constants + 496
   623                                  
   624                                  free_var_29:	; location of __bin-apply
   625 00000777 [7F07000000000000]      	dq .undefined_object
   626                                  .undefined_object:
   627 0000077F 05                      	db T_undefined
   628 00000780 [0102000000000000]      	dq L_constants + 513
   629                                  
   630                                  free_var_30:	; location of __bin-add-rr
   631 00000788 [9007000000000000]      	dq .undefined_object
   632                                  .undefined_object:
   633 00000790 05                      	db T_undefined
   634 00000791 [1502000000000000]      	dq L_constants + 533
   635                                  
   636                                  free_var_31:	; location of __bin-sub-rr
   637 00000799 [A107000000000000]      	dq .undefined_object
   638                                  .undefined_object:
   639 000007A1 05                      	db T_undefined
   640 000007A2 [2A02000000000000]      	dq L_constants + 554
   641                                  
   642                                  free_var_32:	; location of __bin-mul-rr
   643 000007AA [B207000000000000]      	dq .undefined_object
   644                                  .undefined_object:
   645 000007B2 05                      	db T_undefined
   646 000007B3 [3F02000000000000]      	dq L_constants + 575
   647                                  
   648                                  free_var_33:	; location of __bin-div-rr
   649 000007BB [C307000000000000]      	dq .undefined_object
   650                                  .undefined_object:
   651 000007C3 05                      	db T_undefined
   652 000007C4 [5402000000000000]      	dq L_constants + 596
   653                                  
   654                                  free_var_34:	; location of __bin-add-qq
   655 000007CC [D407000000000000]      	dq .undefined_object
   656                                  .undefined_object:
   657 000007D4 05                      	db T_undefined
   658 000007D5 [6902000000000000]      	dq L_constants + 617
   659                                  
   660                                  free_var_35:	; location of __bin-sub-qq
   661 000007DD [E507000000000000]      	dq .undefined_object
   662                                  .undefined_object:
   663 000007E5 05                      	db T_undefined
   664 000007E6 [7E02000000000000]      	dq L_constants + 638
   665                                  
   666                                  free_var_36:	; location of __bin-mul-qq
   667 000007EE [F607000000000000]      	dq .undefined_object
   668                                  .undefined_object:
   669 000007F6 05                      	db T_undefined
   670 000007F7 [9302000000000000]      	dq L_constants + 659
   671                                  
   672                                  free_var_37:	; location of __bin-div-qq
   673 000007FF [0708000000000000]      	dq .undefined_object
   674                                  .undefined_object:
   675 00000807 05                      	db T_undefined
   676 00000808 [A802000000000000]      	dq L_constants + 680
   677                                  
   678                                  free_var_38:	; location of __bin-add-zz
   679 00000810 [1808000000000000]      	dq .undefined_object
   680                                  .undefined_object:
   681 00000818 05                      	db T_undefined
   682 00000819 [BD02000000000000]      	dq L_constants + 701
   683                                  
   684                                  free_var_39:	; location of __bin-sub-zz
   685 00000821 [2908000000000000]      	dq .undefined_object
   686                                  .undefined_object:
   687 00000829 05                      	db T_undefined
   688 0000082A [D202000000000000]      	dq L_constants + 722
   689                                  
   690                                  free_var_40:	; location of __bin-mul-zz
   691 00000832 [3A08000000000000]      	dq .undefined_object
   692                                  .undefined_object:
   693 0000083A 05                      	db T_undefined
   694 0000083B [E702000000000000]      	dq L_constants + 743
   695                                  
   696                                  free_var_41:	; location of __bin-div-zz
   697 00000843 [4B08000000000000]      	dq .undefined_object
   698                                  .undefined_object:
   699 0000084B 05                      	db T_undefined
   700 0000084C [FC02000000000000]      	dq L_constants + 764
   701                                  
   702                                  free_var_42:	; location of error
   703 00000854 [5C08000000000000]      	dq .undefined_object
   704                                  .undefined_object:
   705 0000085C 05                      	db T_undefined
   706 0000085D [1103000000000000]      	dq L_constants + 785
   707                                  
   708                                  free_var_43:	; location of __bin-less-than-rr
   709 00000865 [6D08000000000000]      	dq .undefined_object
   710                                  .undefined_object:
   711 0000086D 05                      	db T_undefined
   712 0000086E [1F03000000000000]      	dq L_constants + 799
   713                                  
   714                                  free_var_44:	; location of __bin-less-than-qq
   715 00000876 [7E08000000000000]      	dq .undefined_object
   716                                  .undefined_object:
   717 0000087E 05                      	db T_undefined
   718 0000087F [3A03000000000000]      	dq L_constants + 826
   719                                  
   720                                  free_var_45:	; location of __bin-less-than-zz
   721 00000887 [8F08000000000000]      	dq .undefined_object
   722                                  .undefined_object:
   723 0000088F 05                      	db T_undefined
   724 00000890 [5503000000000000]      	dq L_constants + 853
   725                                  
   726                                  free_var_46:	; location of __bin-equal-rr
   727 00000898 [A008000000000000]      	dq .undefined_object
   728                                  .undefined_object:
   729 000008A0 05                      	db T_undefined
   730 000008A1 [7003000000000000]      	dq L_constants + 880
   731                                  
   732                                  free_var_47:	; location of __bin-equal-qq
   733 000008A9 [B108000000000000]      	dq .undefined_object
   734                                  .undefined_object:
   735 000008B1 05                      	db T_undefined
   736 000008B2 [8703000000000000]      	dq L_constants + 903
   737                                  
   738                                  free_var_48:	; location of __bin-equal-zz
   739 000008BA [C208000000000000]      	dq .undefined_object
   740                                  .undefined_object:
   741 000008C2 05                      	db T_undefined
   742 000008C3 [9E03000000000000]      	dq L_constants + 926
   743                                  
   744                                  free_var_49:	; location of quotient
   745 000008CB [D308000000000000]      	dq .undefined_object
   746                                  .undefined_object:
   747 000008D3 05                      	db T_undefined
   748 000008D4 [B503000000000000]      	dq L_constants + 949
   749                                  
   750                                  free_var_50:	; location of remainder
   751 000008DC [E408000000000000]      	dq .undefined_object
   752                                  .undefined_object:
   753 000008E4 05                      	db T_undefined
   754 000008E5 [C603000000000000]      	dq L_constants + 966
   755                                  
   756                                  free_var_51:	; location of set-car!
   757 000008ED [F508000000000000]      	dq .undefined_object
   758                                  .undefined_object:
   759 000008F5 05                      	db T_undefined
   760 000008F6 [D803000000000000]      	dq L_constants + 984
   761                                  
   762                                  free_var_52:	; location of set-cdr!
   763 000008FE [0609000000000000]      	dq .undefined_object
   764                                  .undefined_object:
   765 00000906 05                      	db T_undefined
   766 00000907 [E903000000000000]      	dq L_constants + 1001
   767                                  
   768                                  free_var_53:	; location of string-ref
   769 0000090F [1709000000000000]      	dq .undefined_object
   770                                  .undefined_object:
   771 00000917 05                      	db T_undefined
   772 00000918 [FA03000000000000]      	dq L_constants + 1018
   773                                  
   774                                  free_var_54:	; location of vector-ref
   775 00000920 [2809000000000000]      	dq .undefined_object
   776                                  .undefined_object:
   777 00000928 05                      	db T_undefined
   778 00000929 [0D04000000000000]      	dq L_constants + 1037
   779                                  
   780                                  free_var_55:	; location of vector-set!
   781 00000931 [3909000000000000]      	dq .undefined_object
   782                                  .undefined_object:
   783 00000939 05                      	db T_undefined
   784 0000093A [2004000000000000]      	dq L_constants + 1056
   785                                  
   786                                  free_var_56:	; location of string-set!
   787 00000942 [4A09000000000000]      	dq .undefined_object
   788                                  .undefined_object:
   789 0000094A 05                      	db T_undefined
   790 0000094B [3404000000000000]      	dq L_constants + 1076
   791                                  
   792                                  free_var_57:	; location of make-vector
   793 00000953 [5B09000000000000]      	dq .undefined_object
   794                                  .undefined_object:
   795 0000095B 05                      	db T_undefined
   796 0000095C [4804000000000000]      	dq L_constants + 1096
   797                                  
   798                                  free_var_58:	; location of make-string
   799 00000964 [6C09000000000000]      	dq .undefined_object
   800                                  .undefined_object:
   801 0000096C 05                      	db T_undefined
   802 0000096D [5C04000000000000]      	dq L_constants + 1116
   803                                  
   804                                  free_var_59:	; location of numerator
   805 00000975 [7D09000000000000]      	dq .undefined_object
   806                                  .undefined_object:
   807 0000097D 05                      	db T_undefined
   808 0000097E [7004000000000000]      	dq L_constants + 1136
   809                                  
   810                                  free_var_60:	; location of denominator
   811 00000986 [8E09000000000000]      	dq .undefined_object
   812                                  .undefined_object:
   813 0000098E 05                      	db T_undefined
   814 0000098F [8204000000000000]      	dq L_constants + 1154
   815                                  
   816                                  free_var_61:	; location of eq?
   817 00000997 [9F09000000000000]      	dq .undefined_object
   818                                  .undefined_object:
   819 0000099F 05                      	db T_undefined
   820 000009A0 [9604000000000000]      	dq L_constants + 1174
   821                                  
   822                                  free_var_62:	; location of __integer-to-fraction
   823 000009A8 [B009000000000000]      	dq .undefined_object
   824                                  .undefined_object:
   825 000009B0 05                      	db T_undefined
   826 000009B1 [A204000000000000]      	dq L_constants + 1186
   827                                  
   828                                  free_var_63:	; location of logand
   829 000009B9 [C109000000000000]      	dq .undefined_object
   830                                  .undefined_object:
   831 000009C1 05                      	db T_undefined
   832 000009C2 [C004000000000000]      	dq L_constants + 1216
   833                                  
   834                                  free_var_64:	; location of logor
   835 000009CA [D209000000000000]      	dq .undefined_object
   836                                  .undefined_object:
   837 000009D2 05                      	db T_undefined
   838 000009D3 [CF04000000000000]      	dq L_constants + 1231
   839                                  
   840                                  free_var_65:	; location of logxor
   841 000009DB [E309000000000000]      	dq .undefined_object
   842                                  .undefined_object:
   843 000009E3 05                      	db T_undefined
   844 000009E4 [DD04000000000000]      	dq L_constants + 1245
   845                                  
   846                                  free_var_66:	; location of lognot
   847 000009EC [F409000000000000]      	dq .undefined_object
   848                                  .undefined_object:
   849 000009F4 05                      	db T_undefined
   850 000009F5 [EC04000000000000]      	dq L_constants + 1260
   851                                  
   852                                  free_var_67:	; location of ash
   853 000009FD [050A000000000000]      	dq .undefined_object
   854                                  .undefined_object:
   855 00000A05 05                      	db T_undefined
   856 00000A06 [FB04000000000000]      	dq L_constants + 1275
   857                                  
   858                                  free_var_68:	; location of symbol?
   859 00000A0E [160A000000000000]      	dq .undefined_object
   860                                  .undefined_object:
   861 00000A16 05                      	db T_undefined
   862 00000A17 [0705000000000000]      	dq L_constants + 1287
   863                                  
   864                                  free_var_69:	; location of uninterned-symbol?
   865 00000A1F [270A000000000000]      	dq .undefined_object
   866                                  .undefined_object:
   867 00000A27 05                      	db T_undefined
   868 00000A28 [1705000000000000]      	dq L_constants + 1303
   869                                  
   870                                  free_var_70:	; location of gensym?
   871 00000A30 [380A000000000000]      	dq .undefined_object
   872                                  .undefined_object:
   873 00000A38 05                      	db T_undefined
   874 00000A39 [3205000000000000]      	dq L_constants + 1330
   875                                  
   876                                  free_var_71:	; location of gensym
   877 00000A41 [490A000000000000]      	dq .undefined_object
   878                                  .undefined_object:
   879 00000A49 05                      	db T_undefined
   880 00000A4A [4205000000000000]      	dq L_constants + 1346
   881                                  
   882                                  free_var_72:	; location of frame
   883 00000A52 [5A0A000000000000]      	dq .undefined_object
   884                                  .undefined_object:
   885 00000A5A 05                      	db T_undefined
   886 00000A5B [5105000000000000]      	dq L_constants + 1361
   887                                  
   888                                  free_var_73:	; location of break
   889 00000A63 [6B0A000000000000]      	dq .undefined_object
   890                                  .undefined_object:
   891 00000A6B 05                      	db T_undefined
   892 00000A6C [5F05000000000000]      	dq L_constants + 1375
   893                                  
   894                                  free_var_74:	; location of x
   895 00000A74 [7C0A000000000000]      	dq .undefined_object
   896                                  .undefined_object:
   897 00000A7C 05                      	db T_undefined
   898 00000A7D [6D05000000000000]      	dq L_constants + 1389
   899                                  
   900                                  free_var_75:	; location of y
   901 00000A85 [8D0A000000000000]      	dq .undefined_object
   902                                  .undefined_object:
   903 00000A8D 05                      	db T_undefined
   904 00000A8E [8005000000000000]      	dq L_constants + 1408
   905                                  
   906                                  
   907                                  extern printf, fprintf, stdout, stderr, fwrite, exit, putchar, getchar
   908                                  global main
   909                                  section .text
   910                                  main:
   911 00000000 C8000000                        enter 0, 0
   912                                          
   913                                  	; building closure for null?
   914 00000004 48BF-                   	mov rdi, free_var_0
   914 00000006 [8A05000000000000] 
   915 0000000E 48BE-                   	mov rsi, L_code_ptr_is_null
   915 00000010 [5412000000000000] 
   916 00000018 E838100000              	call bind_primitive
   917                                  
   918                                  	; building closure for pair?
   919 0000001D 48BF-                   	mov rdi, free_var_1
   919 0000001F [9B05000000000000] 
   920 00000027 48BE-                   	mov rsi, L_code_ptr_is_pair
   920 00000029 [8612000000000000] 
   921 00000031 E81F100000              	call bind_primitive
   922                                  
   923                                  	; building closure for void?
   924 00000036 48BF-                   	mov rdi, free_var_2
   924 00000038 [AC05000000000000] 
   925 00000040 48BE-                   	mov rsi, L_code_ptr_is_void
   925 00000042 [B812000000000000] 
   926 0000004A E806100000              	call bind_primitive
   927                                  
   928                                  	; building closure for char?
   929 0000004F 48BF-                   	mov rdi, free_var_3
   929 00000051 [BD05000000000000] 
   930 00000059 48BE-                   	mov rsi, L_code_ptr_is_char
   930 0000005B [EA12000000000000] 
   931 00000063 E8ED0F0000              	call bind_primitive
   932                                  
   933                                  	; building closure for string?
   934 00000068 48BF-                   	mov rdi, free_var_4
   934 0000006A [CE05000000000000] 
   935 00000072 48BE-                   	mov rsi, L_code_ptr_is_string
   935 00000074 [1C13000000000000] 
   936 0000007C E8D40F0000              	call bind_primitive
   937                                  
   938                                  	; building closure for interned-symbol?
   939 00000081 48BF-                   	mov rdi, free_var_5
   939 00000083 [DF05000000000000] 
   940 0000008B 48BE-                   	mov rsi, L_code_ptr_is_symbol
   940 0000008D [4E13000000000000] 
   941 00000095 E8BB0F0000              	call bind_primitive
   942                                  
   943                                  	; building closure for vector?
   944 0000009A 48BF-                   	mov rdi, free_var_6
   944 0000009C [F005000000000000] 
   945 000000A4 48BE-                   	mov rsi, L_code_ptr_is_vector
   945 000000A6 [1A14000000000000] 
   946 000000AE E8A20F0000              	call bind_primitive
   947                                  
   948                                  	; building closure for procedure?
   949 000000B3 48BF-                   	mov rdi, free_var_7
   949 000000B5 [0106000000000000] 
   950 000000BD 48BE-                   	mov rsi, L_code_ptr_is_closure
   950 000000BF [4C14000000000000] 
   951 000000C7 E8890F0000              	call bind_primitive
   952                                  
   953                                  	; building closure for real?
   954 000000CC 48BF-                   	mov rdi, free_var_8
   954 000000CE [1206000000000000] 
   955 000000D6 48BE-                   	mov rsi, L_code_ptr_is_real
   955 000000D8 [7E14000000000000] 
   956 000000E0 E8700F0000              	call bind_primitive
   957                                  
   958                                  	; building closure for fraction?
   959 000000E5 48BF-                   	mov rdi, free_var_9
   959 000000E7 [2306000000000000] 
   960 000000EF 48BE-                   	mov rsi, L_code_ptr_is_fraction
   960 000000F1 [B014000000000000] 
   961 000000F9 E8570F0000              	call bind_primitive
   962                                  
   963                                  	; building closure for boolean?
   964 000000FE 48BF-                   	mov rdi, free_var_10
   964 00000100 [3406000000000000] 
   965 00000108 48BE-                   	mov rsi, L_code_ptr_is_boolean
   965 0000010A [E214000000000000] 
   966 00000112 E83E0F0000              	call bind_primitive
   967                                  
   968                                  	; building closure for number?
   969 00000117 48BF-                   	mov rdi, free_var_11
   969 00000119 [4506000000000000] 
   970 00000121 48BE-                   	mov rsi, L_code_ptr_is_number
   970 00000123 [7E15000000000000] 
   971 0000012B E8250F0000              	call bind_primitive
   972                                  
   973                                  	; building closure for collection?
   974 00000130 48BF-                   	mov rdi, free_var_12
   974 00000132 [5606000000000000] 
   975 0000013A 48BE-                   	mov rsi, L_code_ptr_is_collection
   975 0000013C [B215000000000000] 
   976 00000144 E80C0F0000              	call bind_primitive
   977                                  
   978                                  	; building closure for cons
   979 00000149 48BF-                   	mov rdi, free_var_13
   979 0000014B [6706000000000000] 
   980 00000153 48BE-                   	mov rsi, L_code_ptr_cons
   980 00000155 [E615000000000000] 
   981 0000015D E8F30E0000              	call bind_primitive
   982                                  
   983                                  	; building closure for display-sexpr
   984 00000162 48BF-                   	mov rdi, free_var_14
   984 00000164 [7806000000000000] 
   985 0000016C 48BE-                   	mov rsi, L_code_ptr_display_sexpr
   985 0000016E [1616000000000000] 
   986 00000176 E8DA0E0000              	call bind_primitive
   987                                  
   988                                  	; building closure for write-char
   989 0000017B 48BF-                   	mov rdi, free_var_15
   989 0000017D [8906000000000000] 
   990 00000185 48BE-                   	mov rsi, L_code_ptr_write_char
   990 00000187 [3C16000000000000] 
   991 0000018F E8C10E0000              	call bind_primitive
   992                                  
   993                                  	; building closure for car
   994 00000194 48BF-                   	mov rdi, free_var_16
   994 00000196 [9A06000000000000] 
   995 0000019E 48BE-                   	mov rsi, L_code_ptr_car
   995 000001A0 [8F16000000000000] 
   996 000001A8 E8A80E0000              	call bind_primitive
   997                                  
   998                                  	; building closure for cdr
   999 000001AD 48BF-                   	mov rdi, free_var_17
   999 000001AF [AB06000000000000] 
  1000 000001B7 48BE-                   	mov rsi, L_code_ptr_cdr
  1000 000001B9 [B316000000000000] 
  1001 000001C1 E88F0E0000              	call bind_primitive
  1002                                  
  1003                                  	; building closure for string-length
  1004 000001C6 48BF-                   	mov rdi, free_var_18
  1004 000001C8 [BC06000000000000] 
  1005 000001D0 48BE-                   	mov rsi, L_code_ptr_string_length
  1005 000001D2 [D716000000000000] 
  1006 000001DA E8760E0000              	call bind_primitive
  1007                                  
  1008                                  	; building closure for vector-length
  1009 000001DF 48BF-                   	mov rdi, free_var_19
  1009 000001E1 [CD06000000000000] 
  1010 000001E9 48BE-                   	mov rsi, L_code_ptr_vector_length
  1010 000001EB [0017000000000000] 
  1011 000001F3 E85D0E0000              	call bind_primitive
  1012                                  
  1013                                  	; building closure for real->integer
  1014 000001F8 48BF-                   	mov rdi, free_var_20
  1014 000001FA [DE06000000000000] 
  1015 00000202 48BE-                   	mov rsi, L_code_ptr_real_to_integer
  1015 00000204 [2917000000000000] 
  1016 0000020C E8440E0000              	call bind_primitive
  1017                                  
  1018                                  	; building closure for exit
  1019 00000211 48BF-                   	mov rdi, free_var_21
  1019 00000213 [EF06000000000000] 
  1020 0000021B 48BE-                   	mov rsi, L_code_ptr_exit
  1020 0000021D [5817000000000000] 
  1021 00000225 E82B0E0000              	call bind_primitive
  1022                                  
  1023                                  	; building closure for integer->real
  1024 0000022A 48BF-                   	mov rdi, free_var_22
  1024 0000022C [0007000000000000] 
  1025 00000234 48BE-                   	mov rsi, L_code_ptr_integer_to_real
  1025 00000236 [7117000000000000] 
  1026 0000023E E8120E0000              	call bind_primitive
  1027                                  
  1028                                  	; building closure for fraction->real
  1029 00000243 48BF-                   	mov rdi, free_var_23
  1029 00000245 [1107000000000000] 
  1030 0000024D 48BE-                   	mov rsi, L_code_ptr_fraction_to_real
  1030 0000024F [9F17000000000000] 
  1031 00000257 E8F90D0000              	call bind_primitive
  1032                                  
  1033                                  	; building closure for char->integer
  1034 0000025C 48BF-                   	mov rdi, free_var_24
  1034 0000025E [2207000000000000] 
  1035 00000266 48BE-                   	mov rsi, L_code_ptr_char_to_integer
  1035 00000268 [DA17000000000000] 
  1036 00000270 E8E00D0000              	call bind_primitive
  1037                                  
  1038                                  	; building closure for integer->char
  1039 00000275 48BF-                   	mov rdi, free_var_25
  1039 00000277 [3307000000000000] 
  1040 0000027F 48BE-                   	mov rsi, L_code_ptr_integer_to_char
  1040 00000281 [4918000000000000] 
  1041 00000289 E8C70D0000              	call bind_primitive
  1042                                  
  1043                                  	; building closure for trng
  1044 0000028E 48BF-                   	mov rdi, free_var_26
  1044 00000290 [4407000000000000] 
  1045 00000298 48BE-                   	mov rsi, L_code_ptr_trng
  1045 0000029A [9418000000000000] 
  1046 000002A2 E8AE0D0000              	call bind_primitive
  1047                                  
  1048                                  	; building closure for zero?
  1049 000002A7 48BF-                   	mov rdi, free_var_27
  1049 000002A9 [5507000000000000] 
  1050 000002B1 48BE-                   	mov rsi, L_code_ptr_is_zero
  1050 000002B3 [B318000000000000] 
  1051 000002BB E8950D0000              	call bind_primitive
  1052                                  
  1053                                  	; building closure for integer?
  1054 000002C0 48BF-                   	mov rdi, free_var_28
  1054 000002C2 [6607000000000000] 
  1055 000002CA 48BE-                   	mov rsi, L_code_ptr_is_integer
  1055 000002CC [1819000000000000] 
  1056 000002D4 E87C0D0000              	call bind_primitive
  1057                                  
  1058                                  	; building closure for __bin-apply
  1059 000002D9 48BF-                   	mov rdi, free_var_29
  1059 000002DB [7707000000000000] 
  1060 000002E3 48BE-                   	mov rsi, L_code_ptr_bin_apply
  1060 000002E5 [C511000000000000] 
  1061 000002ED E8630D0000              	call bind_primitive
  1062                                  
  1063                                  	; building closure for __bin-add-rr
  1064 000002F2 48BF-                   	mov rdi, free_var_30
  1064 000002F4 [8807000000000000] 
  1065 000002FC 48BE-                   	mov rsi, L_code_ptr_raw_bin_add_rr
  1065 000002FE [4A19000000000000] 
  1066 00000306 E84A0D0000              	call bind_primitive
  1067                                  
  1068                                  	; building closure for __bin-sub-rr
  1069 0000030B 48BF-                   	mov rdi, free_var_31
  1069 0000030D [9907000000000000] 
  1070 00000315 48BE-                   	mov rsi, L_code_ptr_raw_bin_sub_rr
  1070 00000317 [8A19000000000000] 
  1071 0000031F E8310D0000              	call bind_primitive
  1072                                  
  1073                                  	; building closure for __bin-mul-rr
  1074 00000324 48BF-                   	mov rdi, free_var_32
  1074 00000326 [AA07000000000000] 
  1075 0000032E 48BE-                   	mov rsi, L_code_ptr_raw_bin_mul_rr
  1075 00000330 [CA19000000000000] 
  1076 00000338 E8180D0000              	call bind_primitive
  1077                                  
  1078                                  	; building closure for __bin-div-rr
  1079 0000033D 48BF-                   	mov rdi, free_var_33
  1079 0000033F [BB07000000000000] 
  1080 00000347 48BE-                   	mov rsi, L_code_ptr_raw_bin_div_rr
  1080 00000349 [0A1A000000000000] 
  1081 00000351 E8FF0C0000              	call bind_primitive
  1082                                  
  1083                                  	; building closure for __bin-add-qq
  1084 00000356 48BF-                   	mov rdi, free_var_34
  1084 00000358 [CC07000000000000] 
  1085 00000360 48BE-                   	mov rsi, L_code_ptr_raw_bin_add_qq
  1085 00000362 [941A000000000000] 
  1086 0000036A E8E60C0000              	call bind_primitive
  1087                                  
  1088                                  	; building closure for __bin-sub-qq
  1089 0000036F 48BF-                   	mov rdi, free_var_35
  1089 00000371 [DD07000000000000] 
  1090 00000379 48BE-                   	mov rsi, L_code_ptr_raw_bin_sub_qq
  1090 0000037B [341B000000000000] 
  1091 00000383 E8CD0C0000              	call bind_primitive
  1092                                  
  1093                                  	; building closure for __bin-mul-qq
  1094 00000388 48BF-                   	mov rdi, free_var_36
  1094 0000038A [EE07000000000000] 
  1095 00000392 48BE-                   	mov rsi, L_code_ptr_raw_bin_mul_qq
  1095 00000394 [D91B000000000000] 
  1096 0000039C E8B40C0000              	call bind_primitive
  1097                                  
  1098                                  	; building closure for __bin-div-qq
  1099 000003A1 48BF-                   	mov rdi, free_var_37
  1099 000003A3 [FF07000000000000] 
  1100 000003AB 48BE-                   	mov rsi, L_code_ptr_raw_bin_div_qq
  1100 000003AD [731C000000000000] 
  1101 000003B5 E89B0C0000              	call bind_primitive
  1102                                  
  1103                                  	; building closure for __bin-add-zz
  1104 000003BA 48BF-                   	mov rdi, free_var_38
  1104 000003BC [1008000000000000] 
  1105 000003C4 48BE-                   	mov rsi, L_code_ptr_raw_bin_add_zz
  1105 000003C6 [581A000000000000] 
  1106 000003CE E8820C0000              	call bind_primitive
  1107                                  
  1108                                  	; building closure for __bin-sub-zz
  1109 000003D3 48BF-                   	mov rdi, free_var_39
  1109 000003D5 [2108000000000000] 
  1110 000003DD 48BE-                   	mov rsi, L_code_ptr_raw_bin_sub_zz
  1110 000003DF [F81A000000000000] 
  1111 000003E7 E8690C0000              	call bind_primitive
  1112                                  
  1113                                  	; building closure for __bin-mul-zz
  1114 000003EC 48BF-                   	mov rdi, free_var_40
  1114 000003EE [3208000000000000] 
  1115 000003F6 48BE-                   	mov rsi, L_code_ptr_raw_bin_mul_zz
  1115 000003F8 [981B000000000000] 
  1116 00000400 E8500C0000              	call bind_primitive
  1117                                  
  1118                                  	; building closure for __bin-div-zz
  1119 00000405 48BF-                   	mov rdi, free_var_41
  1119 00000407 [4308000000000000] 
  1120 0000040F 48BE-                   	mov rsi, L_code_ptr_raw_bin_div_zz
  1120 00000411 [2D1C000000000000] 
  1121 00000419 E8370C0000              	call bind_primitive
  1122                                  
  1123                                  	; building closure for error
  1124 0000041E 48BF-                   	mov rdi, free_var_42
  1124 00000420 [5408000000000000] 
  1125 00000428 48BE-                   	mov rsi, L_code_ptr_error
  1125 0000042A [5D1D000000000000] 
  1126 00000432 E81E0C0000              	call bind_primitive
  1127                                  
  1128                                  	; building closure for __bin-less-than-rr
  1129 00000437 48BF-                   	mov rdi, free_var_43
  1129 00000439 [6508000000000000] 
  1130 00000441 48BE-                   	mov rsi, L_code_ptr_raw_less_than_rr
  1130 00000443 [191E000000000000] 
  1131 0000044B E8050C0000              	call bind_primitive
  1132                                  
  1133                                  	; building closure for __bin-less-than-qq
  1134 00000450 48BF-                   	mov rdi, free_var_44
  1134 00000452 [7608000000000000] 
  1135 0000045A 48BE-                   	mov rsi, L_code_ptr_raw_less_than_qq
  1135 0000045C [BB1E000000000000] 
  1136 00000464 E8EC0B0000              	call bind_primitive
  1137                                  
  1138                                  	; building closure for __bin-less-than-zz
  1139 00000469 48BF-                   	mov rdi, free_var_45
  1139 0000046B [8708000000000000] 
  1140 00000473 48BE-                   	mov rsi, L_code_ptr_raw_less_than_zz
  1140 00000475 [6C1E000000000000] 
  1141 0000047D E8D30B0000              	call bind_primitive
  1142                                  
  1143                                  	; building closure for __bin-equal-rr
  1144 00000482 48BF-                   	mov rdi, free_var_46
  1144 00000484 [9808000000000000] 
  1145 0000048C 48BE-                   	mov rsi, L_code_ptr_raw_equal_rr
  1145 0000048E [1A1F000000000000] 
  1146 00000496 E8BA0B0000              	call bind_primitive
  1147                                  
  1148                                  	; building closure for __bin-equal-qq
  1149 0000049B 48BF-                   	mov rdi, free_var_47
  1149 0000049D [A908000000000000] 
  1150 000004A5 48BE-                   	mov rsi, L_code_ptr_raw_equal_qq
  1150 000004A7 [BC1F000000000000] 
  1151 000004AF E8A10B0000              	call bind_primitive
  1152                                  
  1153                                  	; building closure for __bin-equal-zz
  1154 000004B4 48BF-                   	mov rdi, free_var_48
  1154 000004B6 [BA08000000000000] 
  1155 000004BE 48BE-                   	mov rsi, L_code_ptr_raw_equal_zz
  1155 000004C0 [6D1F000000000000] 
  1156 000004C8 E8880B0000              	call bind_primitive
  1157                                  
  1158                                  	; building closure for quotient
  1159 000004CD 48BF-                   	mov rdi, free_var_49
  1159 000004CF [CB08000000000000] 
  1160 000004D7 48BE-                   	mov rsi, L_code_ptr_quotient
  1160 000004D9 [1B20000000000000] 
  1161 000004E1 E86F0B0000              	call bind_primitive
  1162                                  
  1163                                  	; building closure for remainder
  1164 000004E6 48BF-                   	mov rdi, free_var_50
  1164 000004E8 [DC08000000000000] 
  1165 000004F0 48BE-                   	mov rsi, L_code_ptr_remainder
  1165 000004F2 [6720000000000000] 
  1166 000004FA E8560B0000              	call bind_primitive
  1167                                  
  1168                                  	; building closure for set-car!
  1169 000004FF 48BF-                   	mov rdi, free_var_51
  1169 00000501 [ED08000000000000] 
  1170 00000509 48BE-                   	mov rsi, L_code_ptr_set_car
  1170 0000050B [B320000000000000] 
  1171 00000513 E83D0B0000              	call bind_primitive
  1172                                  
  1173                                  	; building closure for set-cdr!
  1174 00000518 48BF-                   	mov rdi, free_var_52
  1174 0000051A [FE08000000000000] 
  1175 00000522 48BE-                   	mov rsi, L_code_ptr_set_cdr
  1175 00000524 [E520000000000000] 
  1176 0000052C E8240B0000              	call bind_primitive
  1177                                  
  1178                                  	; building closure for string-ref
  1179 00000531 48BF-                   	mov rdi, free_var_53
  1179 00000533 [0F09000000000000] 
  1180 0000053B 48BE-                   	mov rsi, L_code_ptr_string_ref
  1180 0000053D [1721000000000000] 
  1181 00000545 E80B0B0000              	call bind_primitive
  1182                                  
  1183                                  	; building closure for vector-ref
  1184 0000054A 48BF-                   	mov rdi, free_var_54
  1184 0000054C [2009000000000000] 
  1185 00000554 48BE-                   	mov rsi, L_code_ptr_vector_ref
  1185 00000556 [7321000000000000] 
  1186 0000055E E8F20A0000              	call bind_primitive
  1187                                  
  1188                                  	; building closure for vector-set!
  1189 00000563 48BF-                   	mov rdi, free_var_55
  1189 00000565 [3109000000000000] 
  1190 0000056D 48BE-                   	mov rsi, L_code_ptr_vector_set
  1190 0000056F [C021000000000000] 
  1191 00000577 E8D90A0000              	call bind_primitive
  1192                                  
  1193                                  	; building closure for string-set!
  1194 0000057C 48BF-                   	mov rdi, free_var_56
  1194 0000057E [4209000000000000] 
  1195 00000586 48BE-                   	mov rsi, L_code_ptr_string_set
  1195 00000588 [1B22000000000000] 
  1196 00000590 E8C00A0000              	call bind_primitive
  1197                                  
  1198                                  	; building closure for make-vector
  1199 00000595 48BF-                   	mov rdi, free_var_57
  1199 00000597 [5309000000000000] 
  1200 0000059F 48BE-                   	mov rsi, L_code_ptr_make_vector
  1200 000005A1 [8122000000000000] 
  1201 000005A9 E8A70A0000              	call bind_primitive
  1202                                  
  1203                                  	; building closure for make-string
  1204 000005AE 48BF-                   	mov rdi, free_var_58
  1204 000005B0 [6409000000000000] 
  1205 000005B8 48BE-                   	mov rsi, L_code_ptr_make_string
  1205 000005BA [DC22000000000000] 
  1206 000005C2 E88E0A0000              	call bind_primitive
  1207                                  
  1208                                  	; building closure for numerator
  1209 000005C7 48BF-                   	mov rdi, free_var_59
  1209 000005C9 [7509000000000000] 
  1210 000005D1 48BE-                   	mov rsi, L_code_ptr_numerator
  1210 000005D3 [3F23000000000000] 
  1211 000005DB E8750A0000              	call bind_primitive
  1212                                  
  1213                                  	; building closure for denominator
  1214 000005E0 48BF-                   	mov rdi, free_var_60
  1214 000005E2 [8609000000000000] 
  1215 000005EA 48BE-                   	mov rsi, L_code_ptr_denominator
  1215 000005EC [6823000000000000] 
  1216 000005F4 E85C0A0000              	call bind_primitive
  1217                                  
  1218                                  	; building closure for eq?
  1219 000005F9 48BF-                   	mov rdi, free_var_61
  1219 000005FB [9709000000000000] 
  1220 00000603 48BE-                   	mov rsi, L_code_ptr_is_eq
  1220 00000605 [9123000000000000] 
  1221 0000060D E8430A0000              	call bind_primitive
  1222                                  
  1223                                  	; building closure for __integer-to-fraction
  1224 00000612 48BF-                   	mov rdi, free_var_62
  1224 00000614 [A809000000000000] 
  1225 0000061C 48BE-                   	mov rsi, L_code_ptr_integer_to_fraction
  1225 0000061E [0B18000000000000] 
  1226 00000626 E82A0A0000              	call bind_primitive
  1227                                  
  1228                                  	; building closure for logand
  1229 0000062B 48BF-                   	mov rdi, free_var_63
  1229 0000062D [B909000000000000] 
  1230 00000635 48BE-                   	mov rsi, L_code_ptr_logand
  1230 00000637 [E410000000000000] 
  1231 0000063F E8110A0000              	call bind_primitive
  1232                                  
  1233                                  	; building closure for logor
  1234 00000644 48BF-                   	mov rdi, free_var_64
  1234 00000646 [CA09000000000000] 
  1235 0000064E 48BE-                   	mov rsi, L_code_ptr_logor
  1235 00000650 [2011000000000000] 
  1236 00000658 E8F8090000              	call bind_primitive
  1237                                  
  1238                                  	; building closure for logxor
  1239 0000065D 48BF-                   	mov rdi, free_var_65
  1239 0000065F [DB09000000000000] 
  1240 00000667 48BE-                   	mov rsi, L_code_ptr_logxor
  1240 00000669 [5C11000000000000] 
  1241 00000671 E8DF090000              	call bind_primitive
  1242                                  
  1243                                  	; building closure for lognot
  1244 00000676 48BF-                   	mov rdi, free_var_66
  1244 00000678 [EC09000000000000] 
  1245 00000680 48BE-                   	mov rsi, L_code_ptr_lognot
  1245 00000682 [9811000000000000] 
  1246 0000068A E8C6090000              	call bind_primitive
  1247                                  
  1248                                  	; building closure for ash
  1249 0000068F 48BF-                   	mov rdi, free_var_67
  1249 00000691 [FD09000000000000] 
  1250 00000699 48BE-                   	mov rsi, L_code_ptr_ash
  1250 0000069B [8310000000000000] 
  1251 000006A3 E8AD090000              	call bind_primitive
  1252                                  
  1253                                  	; building closure for symbol?
  1254 000006A8 48BF-                   	mov rdi, free_var_68
  1254 000006AA [0E0A000000000000] 
  1255 000006B2 48BE-                   	mov rsi, L_code_ptr_is_symbol
  1255 000006B4 [4E13000000000000] 
  1256 000006BC E894090000              	call bind_primitive
  1257                                  
  1258                                  	; building closure for uninterned-symbol?
  1259 000006C1 48BF-                   	mov rdi, free_var_69
  1259 000006C3 [1F0A000000000000] 
  1260 000006CB 48BE-                   	mov rsi, L_code_ptr_is_uninterned_symbol
  1260 000006CD [8113000000000000] 
  1261 000006D5 E87B090000              	call bind_primitive
  1262                                  
  1263                                  	; building closure for gensym?
  1264 000006DA 48BF-                   	mov rdi, free_var_70
  1264 000006DC [300A000000000000] 
  1265 000006E4 48BE-                   	mov rsi, L_code_ptr_is_uninterned_symbol
  1265 000006E6 [8113000000000000] 
  1266 000006EE E862090000              	call bind_primitive
  1267                                  
  1268                                  	; building closure for interned-symbol?
  1269 000006F3 48BF-                   	mov rdi, free_var_5
  1269 000006F5 [DF05000000000000] 
  1270 000006FD 48BE-                   	mov rsi, L_code_ptr_is_interned_symbol
  1270 000006FF [B413000000000000] 
  1271 00000707 E849090000              	call bind_primitive
  1272                                  
  1273                                  	; building closure for gensym
  1274 0000070C 48BF-                   	mov rdi, free_var_71
  1274 0000070E [410A000000000000] 
  1275 00000716 48BE-                   	mov rsi, L_code_ptr_gensym
  1275 00000718 [E613000000000000] 
  1276 00000720 E830090000              	call bind_primitive
  1277                                  
  1278                                  	; building closure for frame
  1279 00000725 48BF-                   	mov rdi, free_var_72
  1279 00000727 [520A000000000000] 
  1280 0000072F 48BE-                   	mov rsi, L_code_ptr_frame
  1280 00000731 [9309000000000000] 
  1281 00000739 E817090000              	call bind_primitive
  1282                                  
  1283                                  	; building closure for break
  1284 0000073E 48BF-                   	mov rdi, free_var_73
  1284 00000740 [630A000000000000] 
  1285 00000748 48BE-                   	mov rsi, L_code_ptr_break
  1285 0000074A [7909000000000000] 
  1286 00000752 E8FE080000              	call bind_primitive
  1287                                  
  1288 00000757 48B8-                   	mov rax, L_constants + 1399
  1288 00000759 [7705000000000000] 
  1289 00000761 48890425[740A0000]      	mov qword [free_var_74], rax
  1290 00000769 48B8-                   	mov rax, sob_void
  1290 0000076B [0000000000000000] 
  1291                                  
  1292 00000773 4889C7                  	mov rdi, rax
  1293 00000776 E8FF020000              	call print_sexpr_if_not_void
  1294                                  
  1295 0000077B 488B0425[740A0000]      	mov rax, qword [free_var_74]	; free var x
  1296 00000783 803805                  	cmp byte [rax], T_undefined
  1297 00000786 0F84AF000000            	je L_error_fvar_undefined
  1298 0000078C 48890425[850A0000]      	mov qword [free_var_75], rax
  1299 00000794 48B8-                   	mov rax, sob_void
  1299 00000796 [0000000000000000] 
  1300                                  
  1301 0000079E 4889C7                  	mov rdi, rax
  1302 000007A1 E8D4020000              	call print_sexpr_if_not_void
  1303                                  
  1304 000007A6 488B0425[850A0000]      	mov rax, qword [free_var_75]	; free var y
  1305 000007AE 803805                  	cmp byte [rax], T_undefined
  1306 000007B1 0F8484000000            	je L_error_fvar_undefined
  1307                                  
  1308 000007B7 4889C7                  	mov rdi, rax
  1309 000007BA E8BB020000              	call print_sexpr_if_not_void
  1310                                  
  1311 000007BF 48B8-                   	mov rax, L_constants + 1
  1311 000007C1 [0100000000000000] 
  1312 000007C9 48890425[740A0000]      	mov qword [free_var_74], rax
  1313 000007D1 48B8-                   	mov rax, sob_void
  1313 000007D3 [0000000000000000] 
  1314                                  
  1315 000007DB 4889C7                  	mov rdi, rax
  1316 000007DE E897020000              	call print_sexpr_if_not_void
  1317                                  
  1318 000007E3 488B0425[740A0000]      	mov rax, qword [free_var_74]	; free var x
  1319 000007EB 803805                  	cmp byte [rax], T_undefined
  1320 000007EE 744B                    	je L_error_fvar_undefined
  1321                                  
  1322 000007F0 4889C7                  	mov rdi, rax
  1323 000007F3 E882020000              	call print_sexpr_if_not_void
  1324                                  
  1325 000007F8 488B0425[850A0000]      	mov rax, qword [free_var_75]	; free var y
  1326 00000800 803805                  	cmp byte [rax], T_undefined
  1327 00000803 7436                    	je L_error_fvar_undefined
  1328                                  
  1329 00000805 4889C7                  	mov rdi, rax
  1330 00000808 E86D020000              	call print_sexpr_if_not_void
  1331                                  
  1332 0000080D 48BF-                           mov rdi, fmt_memory_usage
  1332 0000080F [2E0B000000000000] 
  1333 00000817 488B3425[B40B0000]              mov rsi, qword [top_of_memory]
  1334 0000081F 4881EE[00000000]                sub rsi, memory
  1335 00000826 B800000000                      mov rax, 0
  1336                                          ENTER
    44 0000082B C8000000            <1>  enter 0, 0
    45 0000082F 4883E4F0            <1>  and rsp, ~15
  1337 00000833 E8(00000000)                    call printf
  1338                                          LEAVE
    49 00000838 C9                  <1>  leave
  1339 00000839 C9                      	leave
  1340 0000083A C3                      	ret
  1341                                  
  1342                                  L_error_fvar_undefined:
  1343 0000083B 50                              push rax
  1344 0000083C 488B3C25[00000000]              mov rdi, qword [stderr]  ; destination
  1345 00000844 48BE-                           mov rsi, fmt_undefined_free_var_1
  1345 00000846 [960A000000000000] 
  1346 0000084E B800000000                      mov rax, 0
  1347                                          ENTER
    44 00000853 C8000000            <1>  enter 0, 0
    45 00000857 4883E4F0            <1>  and rsp, ~15
  1348 0000085B E8(00000000)                    call fprintf
  1349                                          LEAVE
    49 00000860 C9                  <1>  leave
  1350 00000861 58                              pop rax
  1351 00000862 488B4001                        mov rax, qword [rax + 1] ; string
  1352 00000866 488D7809                        lea rdi, [rax + 1 + 8]   ; actual characters
  1353 0000086A BE01000000                      mov rsi, 1               ; sizeof(char)
  1354 0000086F 488B5001                        mov rdx, qword [rax + 1] ; string-length
  1355 00000873 488B0C25[00000000]              mov rcx, qword [stderr]  ; destination
  1356 0000087B B800000000                      mov rax, 0
  1357                                          ENTER
    44 00000880 C8000000            <1>  enter 0, 0
    45 00000884 4883E4F0            <1>  and rsp, ~15
  1358 00000888 E8(00000000)                    call fwrite
  1359                                          LEAVE
    49 0000088D C9                  <1>  leave
  1360 0000088E 488B3C25[00000000]              mov rdi, [stderr]       ; destination
  1361 00000896 48BE-                           mov rsi, fmt_undefined_free_var_2
  1361 00000898 [AD0A000000000000] 
  1362 000008A0 B800000000                      mov rax, 0
  1363                                          ENTER
    44 000008A5 C8000000            <1>  enter 0, 0
    45 000008A9 4883E4F0            <1>  and rsp, ~15
  1364 000008AD E8(00000000)                    call fprintf
  1365                                          LEAVE
    49 000008B2 C9                  <1>  leave
  1366 000008B3 48C7C0F6FFFFFF                  mov rax, -10
  1367 000008BA E8(00000000)                    call exit
  1368                                  
  1369                                  L_error_non_closure:
  1370 000008BF 488B3C25[00000000]              mov rdi, qword [stderr]
  1371 000008C7 48BE-                           mov rsi, fmt_non_closure
  1371 000008C9 [640B000000000000] 
  1372 000008D1 B800000000                      mov rax, 0
  1373                                          ENTER
    44 000008D6 C8000000            <1>  enter 0, 0
    45 000008DA 4883E4F0            <1>  and rsp, ~15
  1374 000008DE E8(00000000)                    call fprintf
  1375                                          LEAVE
    49 000008E3 C9                  <1>  leave
  1376 000008E4 48C7C0FEFFFFFF                  mov rax, -2
  1377 000008EB E8(00000000)                    call exit
  1378                                  
  1379                                  L_error_improper_list:
  1380 000008F0 488B3C25[00000000]      	mov rdi, qword [stderr]
  1381 000008F8 48BE-                   	mov rsi, fmt_error_improper_list
  1381 000008FA [8C0B000000000000] 
  1382 00000902 B800000000              	mov rax, 0
  1383                                          ENTER
    44 00000907 C8000000            <1>  enter 0, 0
    45 0000090B 4883E4F0            <1>  and rsp, ~15
  1384 0000090F E8(00000000)            	call fprintf
  1385                                          LEAVE
    49 00000914 C9                  <1>  leave
  1386 00000915 48C7C0F9FFFFFF          	mov rax, -7
  1387 0000091C E8(00000000)            	call exit
  1388                                  
  1389                                  L_error_incorrect_arity_simple:
  1390 00000921 488B3C25[00000000]              mov rdi, qword [stderr]
  1391 00000929 48BE-                           mov rsi, fmt_incorrect_arity_simple
  1391 0000092B [CF0A000000000000] 
  1392 00000933 EB12                            jmp L_error_incorrect_arity_common
  1393                                  L_error_incorrect_arity_opt:
  1394 00000935 488B3C25[00000000]              mov rdi, qword [stderr]
  1395 0000093D 48BE-                           mov rsi, fmt_incorrect_arity_opt
  1395 0000093F [FA0A000000000000] 
  1396                                  L_error_incorrect_arity_common:
  1397 00000947 5A                              pop rdx
  1398 00000948 59                              pop rcx
  1399 00000949 B800000000                      mov rax, 0
  1400                                          ENTER
    44 0000094E C8000000            <1>  enter 0, 0
    45 00000952 4883E4F0            <1>  and rsp, ~15
  1401 00000956 E8(00000000)                    call fprintf
  1402                                          LEAVE
    49 0000095B C9                  <1>  leave
  1403 0000095C 48C7C0FAFFFFFF                  mov rax, -6
  1404 00000963 E8(00000000)                    call exit
  1405                                  
  1406                                  section .data
  1407                                  fmt_undefined_free_var_1:
  1408 00000A96 212121205468652066-             db `!!! The free variable \0`
  1408 00000A9F 726565207661726961-
  1408 00000AA8 626C652000         
  1409                                  fmt_undefined_free_var_2:
  1410 00000AAD 207761732075736564-             db ` was used before it was defined.\n\0`
  1410 00000AB6 206265666F72652069-
  1410 00000ABF 742077617320646566-
  1410 00000AC8 696E65642E0A00     
  1411                                  fmt_incorrect_arity_simple:
  1412 00000ACF 212121204578706563-             db `!!! Expected %ld arguments, but given %ld\n\0`
  1412 00000AD8 74656420256C642061-
  1412 00000AE1 7267756D656E74732C-
  1412 00000AEA 206275742067697665-
  1412 00000AF3 6E20256C640A00     
  1413                                  fmt_incorrect_arity_opt:
  1414 00000AFA 212121204578706563-             db `!!! Expected at least %ld arguments, but given %ld\n\0`
  1414 00000B03 746564206174206C65-
  1414 00000B0C 61737420256C642061-
  1414 00000B15 7267756D656E74732C-
  1414 00000B1E 206275742067697665-
  1414 00000B27 6E20256C640A00     
  1415                                  fmt_memory_usage:
  1416 00000B2E 0A2121212055736564-             db `\n!!! Used %ld bytes of dynamically-allocated memory\n\n\0`
  1416 00000B37 20256C642062797465-
  1416 00000B40 73206F662064796E61-
  1416 00000B49 6D6963616C6C792D61-
  1416 00000B52 6C6C6F636174656420-
  1416 00000B5B 6D656D6F72790A0A00 
  1417                                  fmt_non_closure:
  1418 00000B64 21212120417474656D-             db `!!! Attempting to apply a non-closure!\n\0`
  1418 00000B6D 7074696E6720746F20-
  1418 00000B76 6170706C792061206E-
  1418 00000B7F 6F6E2D636C6F737572-
  1418 00000B88 65210A00           
  1419                                  fmt_error_improper_list:
  1420 00000B8C 212121205468652061-     	db `!!! The argument is not a proper list!\n\0`
  1420 00000B95 7267756D656E742069-
  1420 00000B9E 73206E6F7420612070-
  1420 00000BA7 726F706572206C6973-
  1420 00000BB0 74210A00           
  1421                                  
  1422                                  section .bss
  1423                                  memory:
  1424 00000000 <res 40000000h>         	resb gbytes(1)
  1425                                  
  1426                                  section .data
  1427                                  top_of_memory:
  1428 00000BB4 [0000000000000000]              dq memory
  1429                                  
  1430                                  section .text
  1431                                  malloc:
  1432 00000968 488B0425[B40B0000]              mov rax, qword [top_of_memory]
  1433 00000970 48013C25[B40B0000]              add qword [top_of_memory], rdi
  1434 00000978 C3                              ret
  1435                                  
  1436                                  L_code_ptr_break:
  1437 00000979 48837C241000                    cmp qword [rsp + 8 * 2], 0
  1438 0000097F 0F85001B0000                    jne L_error_arg_count_0
  1439 00000985 CC                              int3
  1440 00000986 48B8-                           mov rax, sob_void
  1440 00000988 [0000000000000000] 
  1441 00000990 C21000                          ret AND_KILL_FRAME(0)        
  1442                                  
  1443                                  L_code_ptr_frame:
  1444 00000993 C8000000                        enter 0, 0
  1445 00000997 48837D1800                      cmp COUNT, 0
  1446 0000099C 0F85E31A0000                    jne L_error_arg_count_0
  1447                                  
  1448 000009A2 48BF-                           mov rdi, fmt_frame
  1448 000009A4 [BC0B000000000000] 
  1449 000009AC 488B7500                        mov rsi, qword [rbp]    ; old rbp
  1450 000009B0 488B5608                        mov rdx, qword [rsi + 8*1] ; ret addr
  1451 000009B4 488B4E10                        mov rcx, qword [rsi + 8*2] ; lexical environment
  1452 000009B8 4C8B4618                        mov r8, qword [rsi + 8*3] ; count
  1453 000009BC 4C8D4E20                        lea r9, [rsi + 8*4]       ; address of argument 0
  1454 000009C0 6A00                            push 0
  1455 000009C2 4151                            push r9
  1456 000009C4 4150                            push r8                   ; we'll use it when printing the params
  1457 000009C6 B800000000                      mov rax, 0
  1458                                          
  1459                                          ENTER
    44 000009CB C8000000            <1>  enter 0, 0
    45 000009CF 4883E4F0            <1>  and rsp, ~15
  1460 000009D3 E8(00000000)                    call printf
  1461                                          LEAVE
    49 000009D8 C9                  <1>  leave
  1462                                  
  1463                                  .L:
  1464 000009D9 488B0C24                        mov rcx, qword [rsp]
  1465 000009DD 4883F900                        cmp rcx, 0
  1466 000009E1 7467                            je .L_out
  1467 000009E3 48BF-                           mov rdi, fmt_frame_param_prefix
  1467 000009E5 [F50B000000000000] 
  1468 000009ED 488B742410                      mov rsi, qword [rsp + 8*2]
  1469 000009F2 B800000000                      mov rax, 0
  1470                                          
  1471                                          ENTER
    44 000009F7 C8000000            <1>  enter 0, 0
    45 000009FB 4883E4F0            <1>  and rsp, ~15
  1472 000009FF E8(00000000)                    call printf
  1473                                          LEAVE
    49 00000A04 C9                  <1>  leave
  1474                                  
  1475 00000A05 488B0C24                        mov rcx, qword [rsp]
  1476 00000A09 48FFC9                          dec rcx
  1477 00000A0C 48890C24                        mov qword [rsp], rcx    ; dec arg count
  1478 00000A10 48FF442410                      inc qword [rsp + 8*2]   ; increment index of current arg
  1479 00000A15 488B7C2408                      mov rdi, qword [rsp + 8*1] ; addr of addr current arg
  1480 00000A1A 4C8D4F08                        lea r9, [rdi + 8]          ; addr of next arg
  1481 00000A1E 4C894C2408                      mov qword [rsp + 8*1], r9  ; backup addr of next arg
  1482 00000A23 488B3F                          mov rdi, qword [rdi]       ; addr of current arg
  1483 00000A26 E87B000000                      call print_sexpr
  1484 00000A2B 48BF-                           mov rdi, fmt_newline
  1484 00000A2D [210C000000000000] 
  1485 00000A35 B800000000                      mov rax, 0
  1486                                          ENTER
    44 00000A3A C8000000            <1>  enter 0, 0
    45 00000A3E 4883E4F0            <1>  and rsp, ~15
  1487 00000A42 E8(00000000)                    call printf
  1488                                          LEAVE
    49 00000A47 C9                  <1>  leave
  1489 00000A48 EB8F                            jmp .L
  1490                                  .L_out:
  1491 00000A4A 48BF-                           mov rdi, fmt_frame_continue
  1491 00000A4C [060C000000000000] 
  1492 00000A54 B800000000                      mov rax, 0
  1493                                          ENTER
    44 00000A59 C8000000            <1>  enter 0, 0
    45 00000A5D 4883E4F0            <1>  and rsp, ~15
  1494 00000A61 E8(00000000)                    call printf
  1495 00000A66 E8(00000000)                    call getchar
  1496                                          LEAVE
    49 00000A6B C9                  <1>  leave
  1497                                          
  1498 00000A6C 48B8-                           mov rax, sob_void
  1498 00000A6E [0000000000000000] 
  1499 00000A76 C9                              leave
  1500 00000A77 C21000                          ret AND_KILL_FRAME(0)
  1501                                          
  1502                                  print_sexpr_if_not_void:
  1503 00000A7A 4881FF[00000000]        	cmp rdi, sob_void
  1504 00000A81 7422                    	je .done
  1505 00000A83 E81E000000              	call print_sexpr
  1506 00000A88 48BF-                   	mov rdi, fmt_newline
  1506 00000A8A [210C000000000000] 
  1507 00000A92 B800000000              	mov rax, 0
  1508                                  	ENTER
    44 00000A97 C8000000            <1>  enter 0, 0
    45 00000A9B 4883E4F0            <1>  and rsp, ~15
  1509 00000A9F E8(00000000)            	call printf
  1510                                  	LEAVE
    49 00000AA4 C9                  <1>  leave
  1511                                  .done:
  1512 00000AA5 C3                      	ret
  1513                                  
  1514                                  section .data
  1515                                  fmt_frame:
  1516 00000BBC 524250203D2025703B-             db `RBP = %p; ret addr = %p; lex env = %p; param count = %d\n\0`
  1516 00000BC5 207265742061646472-
  1516 00000BCE 203D2025703B206C65-
  1516 00000BD7 7820656E76203D2025-
  1516 00000BE0 703B20706172616D20-
  1516 00000BE9 636F756E74203D2025-
  1516 00000BF2 640A00             
  1517                                  fmt_frame_param_prefix:
  1518 00000BF5 3D3D5B706172616D20-             db `==[param %d]==> \0`
  1518 00000BFE 25645D3D3D3E2000   
  1519                                  fmt_frame_continue:
  1520 00000C06 486974203C456E7465-             db `Hit <Enter> to continue...\0`
  1520 00000C0F 723E20746F20636F6E-
  1520 00000C18 74696E75652E2E2E00 
  1521                                  fmt_newline:
  1522 00000C21 0A00                    	db `\n\0`
  1523                                  fmt_void:
  1524 00000C23 233C766F69643E00        	db `#<void>\0`
  1525                                  fmt_nil:
  1526 00000C2B 282900                  	db `()\0`
  1527                                  fmt_boolean_false:
  1528 00000C2E 236600                  	db `#f\0`
  1529                                  fmt_boolean_true:
  1530 00000C31 237400                  	db `#t\0`
  1531                                  fmt_char_backslash:
  1532 00000C34 235C5C00                	db `#\\\\\0`
  1533                                  fmt_char_dquote:
  1534 00000C38 235C2200                	db `#\\"\0`
  1535                                  fmt_char_simple:
  1536 00000C3C 235C256300              	db `#\\%c\0`
  1537                                  fmt_char_null:
  1538 00000C41 235C6E756C00            	db `#\\nul\0`
  1539                                  fmt_char_bell:
  1540 00000C47 235C62656C6C00          	db `#\\bell\0`
  1541                                  fmt_char_backspace:
  1542 00000C4E 235C6261636B737061-     	db `#\\backspace\0`
  1542 00000C57 636500             
  1543                                  fmt_char_tab:
  1544 00000C5A 235C74616200            	db `#\\tab\0`
  1545                                  fmt_char_newline:
  1546 00000C60 235C6E65776C696E65-     	db `#\\newline\0`
  1546 00000C69 00                 
  1547                                  fmt_char_formfeed:
  1548 00000C6A 235C7061676500          	db `#\\page\0`
  1549                                  fmt_char_return:
  1550 00000C71 235C72657475726E00      	db `#\\return\0`
  1551                                  fmt_char_escape:
  1552 00000C7A 235C65736300            	db `#\\esc\0`
  1553                                  fmt_char_space:
  1554 00000C80 235C737061636500        	db `#\\space\0`
  1555                                  fmt_char_hex:
  1556 00000C88 235C782530325800        	db `#\\x%02X\0`
  1557                                  fmt_gensym:
  1558 00000C90 47256C6400                      db `G%ld\0`
  1559                                  fmt_closure:
  1560 00000C95 233C636C6F73757265-     	db `#<closure at 0x%08X env=0x%08X code=0x%08X>\0`
  1560 00000C9E 206174203078253038-
  1560 00000CA7 5820656E763D307825-
  1560 00000CB0 30385820636F64653D-
  1560 00000CB9 3078253038583E00   
  1561                                  fmt_lparen:
  1562 00000CC1 2800                    	db `(\0`
  1563                                  fmt_dotted_pair:
  1564 00000CC3 202E2000                	db ` . \0`
  1565                                  fmt_rparen:
  1566 00000CC7 2900                    	db `)\0`
  1567                                  fmt_space:
  1568 00000CC9 2000                    	db ` \0`
  1569                                  fmt_empty_vector:
  1570 00000CCB 23282900                	db `#()\0`
  1571                                  fmt_vector:
  1572 00000CCF 232800                  	db `#(\0`
  1573                                  fmt_real:
  1574 00000CD2 256600                  	db `%f\0`
  1575                                  fmt_fraction:
  1576 00000CD5 256C642F256C6400        	db `%ld/%ld\0`
  1577                                  fmt_zero:
  1578 00000CDD 3000                    	db `0\0`
  1579                                  fmt_int:
  1580 00000CDF 256C6400                	db `%ld\0`
  1581                                  fmt_unknown_scheme_object_error:
  1582 00000CE3 0A0A21212120457272-     	db `\n\n!!! Error: Unknown Scheme-object (RTTI 0x%02X) `
  1582 00000CEC 6F723A20556E6B6E6F-
  1582 00000CF5 776E20536368656D65-
  1582 00000CFE 2D6F626A6563742028-
  1582 00000D07 525454492030782530-
  1582 00000D10 32582920           
  1583 00000D14 617420616464726573-     	db `at address 0x%08X\n\n\0`
  1583 00000D1D 73203078253038580A-
  1583 00000D26 0A00               
  1584                                  fmt_dquote:
  1585 00000D28 2200                    	db `\"\0`
  1586                                  fmt_string_char:
  1587 00000D2A 256300                          db `%c\0`
  1588                                  fmt_string_char_7:
  1589 00000D2D 5C6100                          db `\\a\0`
  1590                                  fmt_string_char_8:
  1591 00000D30 5C6200                          db `\\b\0`
  1592                                  fmt_string_char_9:
  1593 00000D33 5C7400                          db `\\t\0`
  1594                                  fmt_string_char_10:
  1595 00000D36 5C6E00                          db `\\n\0`
  1596                                  fmt_string_char_11:
  1597 00000D39 5C7600                          db `\\v\0`
  1598                                  fmt_string_char_12:
  1599 00000D3C 5C6600                          db `\\f\0`
  1600                                  fmt_string_char_13:
  1601 00000D3F 5C7200                          db `\\r\0`
  1602                                  fmt_string_char_34:
  1603 00000D42 5C2200                          db `\\"\0`
  1604                                  fmt_string_char_92:
  1605 00000D45 5C5C00                          db `\\\\\0`
  1606                                  fmt_string_char_hex:
  1607 00000D48 5C7825583B00                    db `\\x%X;\0`
  1608                                  
  1609                                  section .text
  1610                                  
  1611                                  print_sexpr:
  1612 00000AA6 C8000000                	enter 0, 0
  1613 00000AAA 8A07                    	mov al, byte [rdi]
  1614 00000AAC 3C00                    	cmp al, T_void
  1615 00000AAE 7465                    	je .Lvoid
  1616 00000AB0 3C01                    	cmp al, T_nil
  1617 00000AB2 7470                    	je .Lnil
  1618 00000AB4 3C09                    	cmp al, T_boolean_false
  1619 00000AB6 747B                    	je .Lboolean_false
  1620 00000AB8 3C0A                    	cmp al, T_boolean_true
  1621 00000ABA 0F8482000000            	je .Lboolean_true
  1622 00000AC0 3C02                    	cmp al, T_char
  1623 00000AC2 0F8489000000            	je .Lchar
  1624 00000AC8 3C41                    	cmp al, T_interned_symbol
  1625 00000ACA 0F84CB010000            	je .Linterned_symbol
  1626 00000AD0 3C42                            cmp al, T_uninterned_symbol
  1627 00000AD2 0F84EF010000                    je .Luninterned_symbol
  1628 00000AD8 3C21                    	cmp al, T_pair
  1629 00000ADA 0F84FA010000            	je .Lpair
  1630 00000AE0 3C22                    	cmp al, T_vector
  1631 00000AE2 0F84C3020000            	je .Lvector
  1632 00000AE8 3C04                    	cmp al, T_closure
  1633 00000AEA 0F8491010000            	je .Lclosure
  1634 00000AF0 3C13                    	cmp al, T_real
  1635 00000AF2 0F8454030000            	je .Lreal
  1636 00000AF8 3C12                    	cmp al, T_fraction
  1637 00000AFA 0F847A030000            	je .Lfraction
  1638 00000B00 3C11                    	cmp al, T_integer
  1639 00000B02 0F84B3030000            	je .Linteger
  1640 00000B08 3C03                    	cmp al, T_string
  1641 00000B0A 0F84BE030000            	je .Lstring
  1642                                  
  1643 00000B10 E9F6040000              	jmp .Lunknown_sexpr_type
  1644                                  
  1645                                  .Lvoid:
  1646 00000B15 48BF-                   	mov rdi, fmt_void
  1646 00000B17 [230C000000000000] 
  1647 00000B1F E91A050000              	jmp .Lemit
  1648                                  
  1649                                  .Lnil:
  1650 00000B24 48BF-                   	mov rdi, fmt_nil
  1650 00000B26 [2B0C000000000000] 
  1651 00000B2E E90B050000              	jmp .Lemit
  1652                                  
  1653                                  .Lboolean_false:
  1654 00000B33 48BF-                   	mov rdi, fmt_boolean_false
  1654 00000B35 [2E0C000000000000] 
  1655 00000B3D E9FC040000              	jmp .Lemit
  1656                                  
  1657                                  .Lboolean_true:
  1658 00000B42 48BF-                   	mov rdi, fmt_boolean_true
  1658 00000B44 [310C000000000000] 
  1659 00000B4C E9ED040000              	jmp .Lemit
  1660                                  
  1661                                  .Lchar:
  1662 00000B51 8A4701                  	mov al, byte [rdi + 1]
  1663 00000B54 3C20                    	cmp al, ' '
  1664 00000B56 7E28                    	jle .Lchar_whitespace
  1665 00000B58 3C5C                    	cmp al, 92 		; backslash
  1666 00000B5A 0F847C000000            	je .Lchar_backslash
  1667 00000B60 3C22                    	cmp al, '"'
  1668 00000B62 0F8483000000            	je .Lchar_dquote
  1669 00000B68 4825FF000000            	and rax, 255
  1670 00000B6E 48BF-                   	mov rdi, fmt_char_simple
  1670 00000B70 [3C0C000000000000] 
  1671 00000B78 4889C6                  	mov rsi, rax
  1672 00000B7B E9BE040000              	jmp .Lemit
  1673                                  
  1674                                  .Lchar_whitespace:
  1675 00000B80 3C00                    	cmp al, 0
  1676 00000B82 7476                    	je .Lchar_null
  1677 00000B84 3C07                    	cmp al, 7
  1678 00000B86 0F847D000000            	je .Lchar_bell
  1679 00000B8C 3C08                    	cmp al, 8
  1680 00000B8E 0F8484000000            	je .Lchar_backspace
  1681 00000B94 3C09                    	cmp al, 9
  1682 00000B96 0F848B000000            	je .Lchar_tab
  1683 00000B9C 3C0A                    	cmp al, 10
  1684 00000B9E 0F8492000000            	je .Lchar_newline
  1685 00000BA4 3C0C                    	cmp al, 12
  1686 00000BA6 0F8499000000            	je .Lchar_formfeed
  1687 00000BAC 3C0D                    	cmp al, 13
  1688 00000BAE 0F84A0000000            	je .Lchar_return
  1689 00000BB4 3C1B                    	cmp al, 27
  1690 00000BB6 0F84A7000000            	je .Lchar_escape
  1691 00000BBC 4825FF000000            	and rax, 255
  1692 00000BC2 3C20                    	cmp al, ' '
  1693 00000BC4 0F84A8000000            	je .Lchar_space
  1694 00000BCA 48BF-                   	mov rdi, fmt_char_hex
  1694 00000BCC [880C000000000000] 
  1695 00000BD4 4889C6                  	mov rsi, rax
  1696 00000BD7 E962040000              	jmp .Lemit	
  1697                                  
  1698                                  .Lchar_backslash:
  1699 00000BDC 48BF-                   	mov rdi, fmt_char_backslash
  1699 00000BDE [340C000000000000] 
  1700 00000BE6 E953040000              	jmp .Lemit
  1701                                  
  1702                                  .Lchar_dquote:
  1703 00000BEB 48BF-                   	mov rdi, fmt_char_dquote
  1703 00000BED [380C000000000000] 
  1704 00000BF5 E944040000              	jmp .Lemit
  1705                                  
  1706                                  .Lchar_null:
  1707 00000BFA 48BF-                   	mov rdi, fmt_char_null
  1707 00000BFC [410C000000000000] 
  1708 00000C04 E935040000              	jmp .Lemit
  1709                                  
  1710                                  .Lchar_bell:
  1711 00000C09 48BF-                   	mov rdi, fmt_char_bell
  1711 00000C0B [470C000000000000] 
  1712 00000C13 E926040000              	jmp .Lemit
  1713                                  
  1714                                  .Lchar_backspace:
  1715 00000C18 48BF-                   	mov rdi, fmt_char_backspace
  1715 00000C1A [4E0C000000000000] 
  1716 00000C22 E917040000              	jmp .Lemit
  1717                                  
  1718                                  .Lchar_tab:
  1719 00000C27 48BF-                   	mov rdi, fmt_char_tab
  1719 00000C29 [5A0C000000000000] 
  1720 00000C31 E908040000              	jmp .Lemit
  1721                                  
  1722                                  .Lchar_newline:
  1723 00000C36 48BF-                   	mov rdi, fmt_char_newline
  1723 00000C38 [600C000000000000] 
  1724 00000C40 E9F9030000              	jmp .Lemit
  1725                                  
  1726                                  .Lchar_formfeed:
  1727 00000C45 48BF-                   	mov rdi, fmt_char_formfeed
  1727 00000C47 [6A0C000000000000] 
  1728 00000C4F E9EA030000              	jmp .Lemit
  1729                                  
  1730                                  .Lchar_return:
  1731 00000C54 48BF-                   	mov rdi, fmt_char_return
  1731 00000C56 [710C000000000000] 
  1732 00000C5E E9DB030000              	jmp .Lemit
  1733                                  
  1734                                  .Lchar_escape:
  1735 00000C63 48BF-                   	mov rdi, fmt_char_escape
  1735 00000C65 [7A0C000000000000] 
  1736 00000C6D E9CC030000              	jmp .Lemit
  1737                                  
  1738                                  .Lchar_space:
  1739 00000C72 48BF-                   	mov rdi, fmt_char_space
  1739 00000C74 [800C000000000000] 
  1740 00000C7C E9BD030000              	jmp .Lemit
  1741                                  
  1742                                  .Lclosure:
  1743 00000C81 4889FE                  	mov rsi, qword rdi
  1744 00000C84 48BF-                   	mov rdi, fmt_closure
  1744 00000C86 [950C000000000000] 
  1745 00000C8E 488B5601                	mov rdx, SOB_CLOSURE_ENV(rsi)
  1746 00000C92 488B4E09                	mov rcx, SOB_CLOSURE_CODE(rsi)
  1747 00000C96 E9A3030000              	jmp .Lemit
  1748                                  
  1749                                  .Linterned_symbol:
  1750 00000C9B 488B7F01                	mov rdi, qword [rdi + 1] ; sob_string
  1751 00000C9F BE01000000              	mov rsi, 1		 ; size = 1 byte
  1752 00000CA4 488B5701                	mov rdx, qword [rdi + 1] ; length
  1753 00000CA8 488D7F09                	lea rdi, [rdi + 1 + 8]	 ; actual characters
  1754 00000CAC 488B0C25[00000000]      	mov rcx, qword [stdout]	 ; FILE *
  1755                                  	ENTER
    44 00000CB4 C8000000            <1>  enter 0, 0
    45 00000CB8 4883E4F0            <1>  and rsp, ~15
  1756 00000CBC E8(00000000)            	call fwrite
  1757                                  	LEAVE
    49 00000CC1 C9                  <1>  leave
  1758 00000CC2 E98C030000              	jmp .Lend
  1759                                  
  1760                                  .Luninterned_symbol:
  1761 00000CC7 488B7701                        mov rsi, qword [rdi + 1] ; gensym counter
  1762 00000CCB 48BF-                           mov rdi, fmt_gensym
  1762 00000CCD [900C000000000000] 
  1763 00000CD5 E964030000                      jmp .Lemit
  1764                                  	
  1765                                  .Lpair:
  1766 00000CDA 57                      	push rdi
  1767 00000CDB 48BF-                   	mov rdi, fmt_lparen
  1767 00000CDD [C10C000000000000] 
  1768 00000CE5 B800000000              	mov rax, 0
  1769                                          ENTER
    44 00000CEA C8000000            <1>  enter 0, 0
    45 00000CEE 4883E4F0            <1>  and rsp, ~15
  1770 00000CF2 E8(00000000)            	call printf
  1771                                          LEAVE
    49 00000CF7 C9                  <1>  leave
  1772 00000CF8 488B3C24                	mov rdi, qword [rsp] 	; pair
  1773 00000CFC 488B7F01                	mov rdi, SOB_PAIR_CAR(rdi)
  1774 00000D00 E8A1FDFFFF              	call print_sexpr
  1775 00000D05 5F                      	pop rdi 		; pair
  1776 00000D06 488B7F09                	mov rdi, SOB_PAIR_CDR(rdi)
  1777                                  .Lcdr:
  1778 00000D0A 8A07                    	mov al, byte [rdi]
  1779 00000D0C 3C01                    	cmp al, T_nil
  1780 00000D0E 7447                    	je .Lcdr_nil
  1781 00000D10 3C21                    	cmp al, T_pair
  1782 00000D12 7462                    	je .Lcdr_pair
  1783 00000D14 57                      	push rdi
  1784 00000D15 48BF-                   	mov rdi, fmt_dotted_pair
  1784 00000D17 [C30C000000000000] 
  1785 00000D1F B800000000              	mov rax, 0
  1786                                          ENTER
    44 00000D24 C8000000            <1>  enter 0, 0
    45 00000D28 4883E4F0            <1>  and rsp, ~15
  1787 00000D2C E8(00000000)            	call printf
  1788                                          LEAVE
    49 00000D31 C9                  <1>  leave
  1789 00000D32 5F                      	pop rdi
  1790 00000D33 E86EFDFFFF              	call print_sexpr
  1791 00000D38 48BF-                   	mov rdi, fmt_rparen
  1791 00000D3A [C70C000000000000] 
  1792 00000D42 B800000000              	mov rax, 0
  1793                                          ENTER
    44 00000D47 C8000000            <1>  enter 0, 0
    45 00000D4B 4883E4F0            <1>  and rsp, ~15
  1794 00000D4F E8(00000000)            	call printf
  1795                                          LEAVE
    49 00000D54 C9                  <1>  leave
  1796 00000D55 C9                      	leave
  1797 00000D56 C3                      	ret
  1798                                  
  1799                                  .Lcdr_nil:
  1800 00000D57 48BF-                   	mov rdi, fmt_rparen
  1800 00000D59 [C70C000000000000] 
  1801 00000D61 B800000000              	mov rax, 0
  1802                                          ENTER
    44 00000D66 C8000000            <1>  enter 0, 0
    45 00000D6A 4883E4F0            <1>  and rsp, ~15
  1803 00000D6E E8(00000000)            	call printf
  1804                                          LEAVE
    49 00000D73 C9                  <1>  leave
  1805 00000D74 C9                      	leave
  1806 00000D75 C3                      	ret
  1807                                  
  1808                                  .Lcdr_pair:
  1809 00000D76 57                      	push rdi
  1810 00000D77 48BF-                   	mov rdi, fmt_space
  1810 00000D79 [C90C000000000000] 
  1811 00000D81 B800000000              	mov rax, 0
  1812                                          ENTER
    44 00000D86 C8000000            <1>  enter 0, 0
    45 00000D8A 4883E4F0            <1>  and rsp, ~15
  1813 00000D8E E8(00000000)            	call printf
  1814                                          LEAVE
    49 00000D93 C9                  <1>  leave
  1815 00000D94 488B3C24                	mov rdi, qword [rsp]
  1816 00000D98 488B7F01                	mov rdi, SOB_PAIR_CAR(rdi)
  1817 00000D9C E805FDFFFF              	call print_sexpr
  1818 00000DA1 5F                      	pop rdi
  1819 00000DA2 488B7F09                	mov rdi, SOB_PAIR_CDR(rdi)
  1820 00000DA6 E95FFFFFFF              	jmp .Lcdr
  1821                                  
  1822                                  .Lvector:
  1823 00000DAB 488B4701                	mov rax, qword [rdi + 1] ; length
  1824 00000DAF 4883F800                	cmp rax, 0
  1825 00000DB3 0F8484000000            	je .Lvector_empty
  1826 00000DB9 57                      	push rdi
  1827 00000DBA 48BF-                   	mov rdi, fmt_vector
  1827 00000DBC [CF0C000000000000] 
  1828 00000DC4 B800000000              	mov rax, 0
  1829                                          ENTER
    44 00000DC9 C8000000            <1>  enter 0, 0
    45 00000DCD 4883E4F0            <1>  and rsp, ~15
  1830 00000DD1 E8(00000000)            	call printf
  1831                                          LEAVE
    49 00000DD6 C9                  <1>  leave
  1832 00000DD7 488B3C24                	mov rdi, qword [rsp]
  1833 00000DDB FF7701                  	push qword [rdi + 1]
  1834 00000DDE 6A01                    	push 1
  1835 00000DE0 488B7F09                	mov rdi, qword [rdi + 1 + 8] ; v[0]
  1836 00000DE4 E8BDFCFFFF              	call print_sexpr
  1837                                  .Lvector_loop:
  1838                                  	; [rsp] index
  1839                                  	; [rsp + 8*1] limit
  1840                                  	; [rsp + 8*2] vector
  1841 00000DE9 488B0424                	mov rax, qword [rsp]
  1842 00000DED 483B442408              	cmp rax, qword [rsp + 8*1]
  1843 00000DF2 7436                    	je .Lvector_end
  1844 00000DF4 48BF-                   	mov rdi, fmt_space
  1844 00000DF6 [C90C000000000000] 
  1845 00000DFE B800000000              	mov rax, 0
  1846                                          ENTER
    44 00000E03 C8000000            <1>  enter 0, 0
    45 00000E07 4883E4F0            <1>  and rsp, ~15
  1847 00000E0B E8(00000000)            	call printf
  1848                                          LEAVE
    49 00000E10 C9                  <1>  leave
  1849 00000E11 488B0424                	mov rax, qword [rsp]
  1850 00000E15 488B5C2410              	mov rbx, qword [rsp + 8*2]
  1851 00000E1A 488B7CC309              	mov rdi, qword [rbx + 1 + 8 + 8 * rax] ; v[i]
  1852 00000E1F E882FCFFFF              	call print_sexpr
  1853 00000E24 48FF0424                	inc qword [rsp]
  1854 00000E28 EBBF                    	jmp .Lvector_loop
  1855                                  
  1856                                  .Lvector_end:
  1857 00000E2A 4883C418                	add rsp, 8*3
  1858 00000E2E 48BF-                   	mov rdi, fmt_rparen
  1858 00000E30 [C70C000000000000] 
  1859 00000E38 E901020000              	jmp .Lemit	
  1860                                  
  1861                                  .Lvector_empty:
  1862 00000E3D 48BF-                   	mov rdi, fmt_empty_vector
  1862 00000E3F [CB0C000000000000] 
  1863 00000E47 E9F2010000              	jmp .Lemit
  1864                                  
  1865                                  .Lreal:
  1866 00000E4C FF7701                  	push qword [rdi + 1]
  1867 00000E4F F20F100424              	movsd xmm0, qword [rsp]
  1868 00000E54 4883C408                	add rsp, 8*1
  1869 00000E58 48BF-                   	mov rdi, fmt_real
  1869 00000E5A [D20C000000000000] 
  1870 00000E62 B801000000              	mov rax, 1
  1871                                  	ENTER
    44 00000E67 C8000000            <1>  enter 0, 0
    45 00000E6B 4883E4F0            <1>  and rsp, ~15
  1872 00000E6F E8(00000000)            	call printf
  1873                                  	LEAVE
    49 00000E74 C9                  <1>  leave
  1874 00000E75 E9D9010000              	jmp .Lend
  1875                                  
  1876                                  .Lfraction:
  1877 00000E7A 488B7701                	mov rsi, qword [rdi + 1]
  1878 00000E7E 488B5709                	mov rdx, qword [rdi + 1 + 8]
  1879 00000E82 4883FE00                	cmp rsi, 0
  1880 00000E86 7415                    	je .Lrat_zero
  1881 00000E88 4883FA01                	cmp rdx, 1
  1882 00000E8C 741E                    	je .Lrat_int
  1883 00000E8E 48BF-                   	mov rdi, fmt_fraction
  1883 00000E90 [D50C000000000000] 
  1884 00000E98 E9A1010000              	jmp .Lemit
  1885                                  
  1886                                  .Lrat_zero:
  1887 00000E9D 48BF-                   	mov rdi, fmt_zero
  1887 00000E9F [DD0C000000000000] 
  1888 00000EA7 E992010000              	jmp .Lemit
  1889                                  
  1890                                  .Lrat_int:
  1891 00000EAC 48BF-                   	mov rdi, fmt_int
  1891 00000EAE [DF0C000000000000] 
  1892 00000EB6 E983010000              	jmp .Lemit
  1893                                  
  1894                                  .Linteger:
  1895 00000EBB 488B7701                	mov rsi, qword [rdi + 1]
  1896 00000EBF 48BF-                   	mov rdi, fmt_int
  1896 00000EC1 [DF0C000000000000] 
  1897 00000EC9 E970010000              	jmp .Lemit
  1898                                  
  1899                                  .Lstring:
  1900 00000ECE 488D4709                	lea rax, [rdi + 1 + 8]
  1901 00000ED2 50                      	push rax
  1902 00000ED3 FF7701                  	push qword [rdi + 1]
  1903 00000ED6 48BF-                   	mov rdi, fmt_dquote
  1903 00000ED8 [280D000000000000] 
  1904 00000EE0 B800000000              	mov rax, 0
  1905                                  	ENTER
    44 00000EE5 C8000000            <1>  enter 0, 0
    45 00000EE9 4883E4F0            <1>  and rsp, ~15
  1906 00000EED E8(00000000)            	call printf
  1907                                  	LEAVE
    49 00000EF2 C9                  <1>  leave
  1908                                  .Lstring_loop:
  1909                                  	; qword [rsp]: limit
  1910                                  	; qword [rsp + 8*1]: char *
  1911 00000EF3 48833C2400              	cmp qword [rsp], 0
  1912 00000EF8 0F84FD000000            	je .Lstring_end
  1913 00000EFE 488B442408              	mov rax, qword [rsp + 8*1]
  1914 00000F03 8A00                    	mov al, byte [rax]
  1915 00000F05 4825FF000000            	and rax, 255
  1916 00000F0B 3C07                    	cmp al, 7
  1917 00000F0D 7468                            je .Lstring_char_7
  1918 00000F0F 3C08                            cmp al, 8
  1919 00000F11 7470                            je .Lstring_char_8
  1920 00000F13 3C09                            cmp al, 9
  1921 00000F15 7478                            je .Lstring_char_9
  1922 00000F17 3C0A                            cmp al, 10
  1923 00000F19 0F847C000000                    je .Lstring_char_10
  1924 00000F1F 3C0B                            cmp al, 11
  1925 00000F21 0F8480000000                    je .Lstring_char_11
  1926 00000F27 3C0C                            cmp al, 12
  1927 00000F29 0F8484000000                    je .Lstring_char_12
  1928 00000F2F 3C0D                            cmp al, 13
  1929 00000F31 0F8488000000                    je .Lstring_char_13
  1930 00000F37 3C22                            cmp al, 34
  1931 00000F39 0F848C000000                    je .Lstring_char_34
  1932 00000F3F 3C5C                            cmp al, 92              ;         je .Lstring_char_92
  1934 00000F41 3C20                            cmp al, ' '
  1935 00000F43 0F8CA0000000                    jl .Lstring_char_hex
  1936 00000F49 48BF-                           mov rdi, fmt_string_char
  1936 00000F4B [2A0D000000000000] 
  1937 00000F53 4889C6                          mov rsi, rax
  1938                                  .Lstring_char_emit:
  1939 00000F56 B800000000                      mov rax, 0
  1940                                          ENTER
    44 00000F5B C8000000            <1>  enter 0, 0
    45 00000F5F 4883E4F0            <1>  and rsp, ~15
  1941 00000F63 E8(00000000)                    call printf
  1942                                          LEAVE
    49 00000F68 C9                  <1>  leave
  1943 00000F69 48FF0C24                        dec qword [rsp]
  1944 00000F6D 48FF442408                      inc qword [rsp + 8*1]
  1945 00000F72 E97CFFFFFF                      jmp .Lstring_loop
  1946                                  
  1947                                  .Lstring_char_7:
  1948 00000F77 48BF-                           mov rdi, fmt_string_char_7
  1948 00000F79 [2D0D000000000000] 
  1949 00000F81 EBD3                            jmp .Lstring_char_emit
  1950                                  
  1951                                  .Lstring_char_8:
  1952 00000F83 48BF-                           mov rdi, fmt_string_char_8
  1952 00000F85 [300D000000000000] 
  1953 00000F8D EBC7                            jmp .Lstring_char_emit
  1954                                          
  1955                                  .Lstring_char_9:
  1956 00000F8F 48BF-                           mov rdi, fmt_string_char_9
  1956 00000F91 [330D000000000000] 
  1957 00000F99 EBBB                            jmp .Lstring_char_emit
  1958                                  
  1959                                  .Lstring_char_10:
  1960 00000F9B 48BF-                           mov rdi, fmt_string_char_10
  1960 00000F9D [360D000000000000] 
  1961 00000FA5 EBAF                            jmp .Lstring_char_emit
  1962                                  
  1963                                  .Lstring_char_11:
  1964 00000FA7 48BF-                           mov rdi, fmt_string_char_11
  1964 00000FA9 [390D000000000000] 
  1965 00000FB1 EBA3                            jmp .Lstring_char_emit
  1966                                  
  1967                                  .Lstring_char_12:
  1968 00000FB3 48BF-                           mov rdi, fmt_string_char_12
  1968 00000FB5 [3C0D000000000000] 
  1969 00000FBD EB97                            jmp .Lstring_char_emit
  1970                                  
  1971                                  .Lstring_char_13:
  1972 00000FBF 48BF-                           mov rdi, fmt_string_char_13
  1972 00000FC1 [3F0D000000000000] 
  1973 00000FC9 EB8B                            jmp .Lstring_char_emit
  1974                                  
  1975                                  .Lstring_char_34:
  1976 00000FCB 48BF-                           mov rdi, fmt_string_char_34
  1976 00000FCD [420D000000000000] 
  1977 00000FD5 E97CFFFFFF                      jmp .Lstring_char_emit
  1978                                  
  1979                                  .Lstring_char_92:
  1980 00000FDA 48BF-                           mov rdi, fmt_string_char_92
  1980 00000FDC [450D000000000000] 
  1981 00000FE4 E96DFFFFFF                      jmp .Lstring_char_emit
  1982                                  
  1983                                  .Lstring_char_hex:
  1984 00000FE9 48BF-                           mov rdi, fmt_string_char_hex
  1984 00000FEB [480D000000000000] 
  1985 00000FF3 4889C6                          mov rsi, rax
  1986 00000FF6 E95BFFFFFF                      jmp .Lstring_char_emit        
  1987                                  
  1988                                  .Lstring_end:
  1989 00000FFB 4883C410                	add rsp, 8 * 2
  1990 00000FFF 48BF-                   	mov rdi, fmt_dquote
  1990 00001001 [280D000000000000] 
  1991 00001009 EB33                    	jmp .Lemit
  1992                                  
  1993                                  .Lunknown_sexpr_type:
  1994 0000100B 48BE-                   	mov rsi, fmt_unknown_scheme_object_error
  1994 0000100D [E30C000000000000] 
  1995 00001015 4825FF000000            	and rax, 255
  1996 0000101B 4889C2                  	mov rdx, rax
  1997 0000101E 4889F9                  	mov rcx, rdi
  1998 00001021 488B3C25[00000000]      	mov rdi, qword [stderr]
  1999 00001029 B800000000              	mov rax, 0
  2000                                          ENTER
    44 0000102E C8000000            <1>  enter 0, 0
    45 00001032 4883E4F0            <1>  and rsp, ~15
  2001 00001036 E8(00000000)            	call fprintf
  2002                                          LEAVE
    49 0000103B C9                  <1>  leave
  2003 0000103C C9                              leave
  2004 0000103D C3                              ret
  2005                                  
  2006                                  .Lemit:
  2007 0000103E B800000000              	mov rax, 0
  2008                                          ENTER
    44 00001043 C8000000            <1>  enter 0, 0
    45 00001047 4883E4F0            <1>  and rsp, ~15
  2009 0000104B E8(00000000)            	call printf
  2010                                          LEAVE
    49 00001050 C9                  <1>  leave
  2011 00001051 EB00                    	jmp .Lend
  2012                                  
  2013                                  .Lend:
  2014                                  	LEAVE
    49 00001053 C9                  <1>  leave
  2015 00001054 C3                      	ret
  2016                                  
  2017                                  ;;; rdi: address of free variable
  2018                                  ;;; rsi: address of code-pointer
  2019                                  bind_primitive:
  2020 00001055 C8000000                        enter 0, 0
  2021 00001059 57                              push rdi
  2022 0000105A BF11000000                      mov rdi, (1 + 8 + 8)
  2023 0000105F E804F9FFFF                      call malloc
  2024 00001064 5F                              pop rdi
  2025 00001065 C60004                          mov byte [rax], T_closure
  2026 00001068 48C7400100000000                mov SOB_CLOSURE_ENV(rax), 0 ; dummy, lexical environment
  2027 00001070 48897009                        mov SOB_CLOSURE_CODE(rax), rsi ; code pointer
  2028 00001074 488907                          mov qword [rdi], rax
  2029 00001077 48B8-                           mov rax, sob_void
  2029 00001079 [0000000000000000] 
  2030 00001081 C9                              leave
  2031 00001082 C3                              ret
  2032                                  
  2033                                  L_code_ptr_ash:
  2034 00001083 C8000000                        enter 0, 0
  2035 00001087 48837D1802                      cmp COUNT, 2
  2036 0000108C 0F855D140000                    jne L_error_arg_count_2
  2037 00001092 488B7D20                        mov rdi, PARAM(0)
  2038                                          assert_integer(rdi)
    53 00001096 803F11              <1>  cmp byte [%1], %2
    54 00001099 0F85EF140000        <1>  jne L_error_incorrect_type
  2039 0000109F 488B4D28                        mov rcx, PARAM(1)
  2040                                          assert_integer(rcx)
    53 000010A3 803911              <1>  cmp byte [%1], %2
    54 000010A6 0F85E2140000        <1>  jne L_error_incorrect_type
  2041 000010AC 488B7F01                        mov rdi, qword [rdi + 1]
  2042 000010B0 488B4901                        mov rcx, qword [rcx + 1]
  2043 000010B4 4883F900                        cmp rcx, 0
  2044 000010B8 7C0F                            jl .L_negative
  2045                                  .L_loop_positive:
  2046 000010BA 4883F900                        cmp rcx, 0
  2047 000010BE 741B                            je .L_exit
  2048 000010C0 48D3E7                          sal rdi, cl
  2049 000010C3 48C1E908                        shr rcx, 8
  2050 000010C7 EBF1                            jmp .L_loop_positive
  2051                                  .L_negative:
  2052 000010C9 48F7D9                          neg rcx
  2053                                  .L_loop_negative:
  2054 000010CC 4883F900                        cmp rcx, 0
  2055 000010D0 7409                            je .L_exit
  2056 000010D2 48D3FF                          sar rdi, cl
  2057 000010D5 48C1E908                        shr rcx, 8
  2058 000010D9 EBF1                            jmp .L_loop_negative
  2059                                  .L_exit:
  2060 000010DB E85A130000                      call make_integer
  2061 000010E0 C9                              leave
  2062 000010E1 C22000                          ret AND_KILL_FRAME(2)
  2063                                  
  2064                                  L_code_ptr_logand:
  2065 000010E4 C8000000                        enter 0, 0
  2066 000010E8 48837D1802                      cmp COUNT, 2
  2067 000010ED 0F85FC130000                    jne L_error_arg_count_2
  2068 000010F3 4C8B4520                        mov r8, PARAM(0)
  2069                                          assert_integer(r8)
    53 000010F7 41803811            <1>  cmp byte [%1], %2
    54 000010FB 0F858D140000        <1>  jne L_error_incorrect_type
  2070 00001101 4C8B4D28                        mov r9, PARAM(1)
  2071                                          assert_integer(r9)
    53 00001105 41803911            <1>  cmp byte [%1], %2
    54 00001109 0F857F140000        <1>  jne L_error_incorrect_type
  2072 0000110F 498B7801                        mov rdi, qword [r8 + 1]
  2073 00001113 49237901                        and rdi, qword [r9 + 1]
  2074 00001117 E81E130000                      call make_integer
  2075 0000111C C9                              leave
  2076 0000111D C22000                          ret AND_KILL_FRAME(2)
  2077                                  
  2078                                  L_code_ptr_logor:
  2079 00001120 C8000000                        enter 0, 0
  2080 00001124 48837D1802                      cmp COUNT, 2
  2081 00001129 0F85C0130000                    jne L_error_arg_count_2
  2082 0000112F 4C8B4520                        mov r8, PARAM(0)
  2083                                          assert_integer(r8)
    53 00001133 41803811            <1>  cmp byte [%1], %2
    54 00001137 0F8551140000        <1>  jne L_error_incorrect_type
  2084 0000113D 4C8B4D28                        mov r9, PARAM(1)
  2085                                          assert_integer(r9)
    53 00001141 41803911            <1>  cmp byte [%1], %2
    54 00001145 0F8543140000        <1>  jne L_error_incorrect_type
  2086 0000114B 498B7801                        mov rdi, qword [r8 + 1]
  2087 0000114F 490B7901                        or rdi, qword [r9 + 1]
  2088 00001153 E8E2120000                      call make_integer
  2089 00001158 C9                              leave
  2090 00001159 C22000                          ret AND_KILL_FRAME(2)
  2091                                  
  2092                                  L_code_ptr_logxor:
  2093 0000115C C8000000                        enter 0, 0
  2094 00001160 48837D1802                      cmp COUNT, 2
  2095 00001165 0F8584130000                    jne L_error_arg_count_2
  2096 0000116B 4C8B4520                        mov r8, PARAM(0)
  2097                                          assert_integer(r8)
    53 0000116F 41803811            <1>  cmp byte [%1], %2
    54 00001173 0F8515140000        <1>  jne L_error_incorrect_type
  2098 00001179 4C8B4D28                        mov r9, PARAM(1)
  2099                                          assert_integer(r9)
    53 0000117D 41803911            <1>  cmp byte [%1], %2
    54 00001181 0F8507140000        <1>  jne L_error_incorrect_type
  2100 00001187 498B7801                        mov rdi, qword [r8 + 1]
  2101 0000118B 49337901                        xor rdi, qword [r9 + 1]
  2102 0000118F E8A6120000                      call make_integer
  2103                                          LEAVE
    49 00001194 C9                  <1>  leave
  2104 00001195 C22000                          ret AND_KILL_FRAME(2)
  2105                                  
  2106                                  L_code_ptr_lognot:
  2107 00001198 C8000000                        enter 0, 0
  2108 0000119C 48837D1801                      cmp COUNT, 1
  2109 000011A1 0F8513130000                    jne L_error_arg_count_1
  2110 000011A7 4C8B4520                        mov r8, PARAM(0)
  2111                                          assert_integer(r8)
    53 000011AB 41803811            <1>  cmp byte [%1], %2
    54 000011AF 0F85D9130000        <1>  jne L_error_incorrect_type
  2112 000011B5 498B7801                        mov rdi, qword [r8 + 1]
  2113 000011B9 48F7D7                          not rdi
  2114 000011BC E879120000                      call make_integer
  2115 000011C1 C9                              leave
  2116 000011C2 C21800                          ret AND_KILL_FRAME(1)
  2117                                  
  2118                                  L_code_ptr_bin_apply:
  2119 000011C5 48837C241002                    cmp qword [rsp + 8 * 2], 2
  2120 000011CB 0F851E130000                    jne L_error_arg_count_2
  2121 000011D1 4C8B642418                      mov r12, qword [rsp + 8 * 3]
  2122                                          assert_closure(r12)
    53 000011D6 41803C2404          <1>  cmp byte [%1], %2
    54 000011DB 0F85AD130000        <1>  jne L_error_incorrect_type
  2123 000011E1 4C8D542420                      lea r10, [rsp + 8 * 4]
  2124 000011E6 4D8B1A                          mov r11, qword [r10]
  2125 000011E9 4C8B0C24                        mov r9, qword [rsp]
  2126 000011ED B900000000                      mov rcx, 0
  2127 000011F2 4C89DE                          mov rsi, r11
  2128                                  .L0:
  2129 000011F5 4881FE[01000000]                cmp rsi, sob_nil
  2130 000011FC 7412                            je .L0_out
  2131                                          assert_pair(rsi)
    53 000011FE 803E21              <1>  cmp byte [%1], %2
    54 00001201 0F8587130000        <1>  jne L_error_incorrect_type
  2132 00001207 48FFC1                          inc rcx
  2133 0000120A 488B7609                        mov rsi, SOB_PAIR_CDR(rsi)
  2134 0000120E EBE5                            jmp .L0
  2135                                  .L0_out:
  2136 00001210 488D1CCDF0FFFFFF                lea rbx, [8 * (rcx - 2)]
  2137 00001218 4829DC                          sub rsp, rbx
  2138 0000121B 4889E7                          mov rdi, rsp
  2139 0000121E FC                              cld
  2140                                          ; place ret addr
  2141 0000121F 4C89C8                          mov rax, r9
  2142 00001222 48AB                            stosq
  2143                                          ; place env_f
  2144 00001224 498B442401                      mov rax, SOB_CLOSURE_ENV(r12)
  2145 00001229 48AB                            stosq
  2146                                          ; place COUNT = rcx
  2147 0000122B 4889C8                          mov rax, rcx
  2148 0000122E 48AB                            stosq
  2149                                  .L1:
  2150 00001230 4883F900                        cmp rcx, 0
  2151 00001234 740F                            je .L1_out
  2152 00001236 498B4301                        mov rax, SOB_PAIR_CAR(r11)
  2153 0000123A 48AB                            stosq
  2154 0000123C 4D8B5B09                        mov r11, SOB_PAIR_CDR(r11)
  2155 00001240 48FFC9                          dec rcx
  2156 00001243 EBEB                            jmp .L1
  2157                                  .L1_out:
  2158 00001245 4883EF08                        sub rdi, 8*1
  2159 00001249 4939FA                          cmp r10, rdi
  2160 0000124C 7505                            jne .L_error_apply_stack_corrupted
  2161 0000124E 41FF642409                      jmp SOB_CLOSURE_CODE(r12)
  2162                                  .L_error_apply_stack_corrupted:
  2163 00001253 CC                              int3
  2164                                  
  2165                                  L_code_ptr_is_null:
  2166 00001254 C8000000                        enter 0, 0
  2167 00001258 48837D1801                      cmp COUNT, 1
  2168 0000125D 0F8557120000                    jne L_error_arg_count_1
  2169 00001263 488B4520                        mov rax, PARAM(0)
  2170 00001267 803801                          cmp byte [rax], T_nil
  2171 0000126A 750C                            jne .L_false
  2172 0000126C 48B8-                           mov rax, sob_boolean_true
  2172 0000126E [0300000000000000] 
  2173 00001276 EB0A                            jmp .L_end
  2174                                  .L_false:
  2175 00001278 48B8-                           mov rax, sob_boolean_false
  2175 0000127A [0200000000000000] 
  2176                                  .L_end:
  2177 00001282 C9                              leave
  2178 00001283 C21800                          ret AND_KILL_FRAME(1)
  2179                                  
  2180                                  L_code_ptr_is_pair:
  2181 00001286 C8000000                        enter 0, 0
  2182 0000128A 48837D1801                      cmp COUNT, 1
  2183 0000128F 0F8525120000                    jne L_error_arg_count_1
  2184 00001295 488B4520                        mov rax, PARAM(0)
  2185 00001299 803821                          cmp byte [rax], T_pair
  2186 0000129C 750C                            jne .L_false
  2187 0000129E 48B8-                           mov rax, sob_boolean_true
  2187 000012A0 [0300000000000000] 
  2188 000012A8 EB0A                            jmp .L_end
  2189                                  .L_false:
  2190 000012AA 48B8-                           mov rax, sob_boolean_false
  2190 000012AC [0200000000000000] 
  2191                                  .L_end:
  2192 000012B4 C9                              leave
  2193 000012B5 C21800                          ret AND_KILL_FRAME(1)
  2194                                          
  2195                                  L_code_ptr_is_void:
  2196 000012B8 C8000000                        enter 0, 0
  2197 000012BC 48837D1801                      cmp COUNT, 1
  2198 000012C1 0F85F3110000                    jne L_error_arg_count_1
  2199 000012C7 488B4520                        mov rax, PARAM(0)
  2200 000012CB 803800                          cmp byte [rax], T_void
  2201 000012CE 750C                            jne .L_false
  2202 000012D0 48B8-                           mov rax, sob_boolean_true
  2202 000012D2 [0300000000000000] 
  2203 000012DA EB0A                            jmp .L_end
  2204                                  .L_false:
  2205 000012DC 48B8-                           mov rax, sob_boolean_false
  2205 000012DE [0200000000000000] 
  2206                                  .L_end:
  2207 000012E6 C9                              leave
  2208 000012E7 C21800                          ret AND_KILL_FRAME(1)
  2209                                  
  2210                                  L_code_ptr_is_char:
  2211 000012EA C8000000                        enter 0, 0
  2212 000012EE 48837D1801                      cmp COUNT, 1
  2213 000012F3 0F85C1110000                    jne L_error_arg_count_1
  2214 000012F9 488B4520                        mov rax, PARAM(0)
  2215 000012FD 803802                          cmp byte [rax], T_char
  2216 00001300 750C                            jne .L_false
  2217 00001302 48B8-                           mov rax, sob_boolean_true
  2217 00001304 [0300000000000000] 
  2218 0000130C EB0A                            jmp .L_end
  2219                                  .L_false:
  2220 0000130E 48B8-                           mov rax, sob_boolean_false
  2220 00001310 [0200000000000000] 
  2221                                  .L_end:
  2222 00001318 C9                              leave
  2223 00001319 C21800                          ret AND_KILL_FRAME(1)
  2224                                  
  2225                                  L_code_ptr_is_string:
  2226 0000131C C8000000                        enter 0, 0
  2227 00001320 48837D1801                      cmp COUNT, 1
  2228 00001325 0F858F110000                    jne L_error_arg_count_1
  2229 0000132B 488B4520                        mov rax, PARAM(0)
  2230 0000132F 803803                          cmp byte [rax], T_string
  2231 00001332 750C                            jne .L_false
  2232 00001334 48B8-                           mov rax, sob_boolean_true
  2232 00001336 [0300000000000000] 
  2233 0000133E EB0A                            jmp .L_end
  2234                                  .L_false:
  2235 00001340 48B8-                           mov rax, sob_boolean_false
  2235 00001342 [0200000000000000] 
  2236                                  .L_end:
  2237 0000134A C9                              leave
  2238 0000134B C21800                          ret AND_KILL_FRAME(1)
  2239                                  
  2240                                  L_code_ptr_is_symbol:
  2241 0000134E C8000000                        enter 0, 0
  2242 00001352 48837D1801                      cmp COUNT, 1
  2243 00001357 0F855D110000                    jne L_error_arg_count_1
  2244 0000135D 4C8B4520                        mov r8, PARAM(0)
  2245 00001361 41802040                        and byte [r8], T_symbol
  2246 00001365 740C                            jz .L_false
  2247 00001367 48B8-                           mov rax, sob_boolean_true
  2247 00001369 [0300000000000000] 
  2248 00001371 EB0A                            jmp .L_exit
  2249                                  .L_false:
  2250 00001373 48B8-                           mov rax, sob_boolean_false
  2250 00001375 [0200000000000000] 
  2251                                  .L_exit:
  2252 0000137D C9                              leave
  2253 0000137E C21800                          ret AND_KILL_FRAME(1)
  2254                                  
  2255                                  L_code_ptr_is_uninterned_symbol:
  2256 00001381 C8000000                        enter 0, 0
  2257 00001385 48837D1801                      cmp COUNT, 1
  2258 0000138A 0F852A110000                    jne L_error_arg_count_1
  2259 00001390 4C8B4520                        mov r8, PARAM(0)
  2260 00001394 41803842                        cmp byte [r8], T_uninterned_symbol
  2261 00001398 750C                            jne .L_false
  2262 0000139A 48B8-                           mov rax, sob_boolean_true
  2262 0000139C [0300000000000000] 
  2263 000013A4 EB0A                            jmp .L_exit
  2264                                  .L_false:
  2265 000013A6 48B8-                           mov rax, sob_boolean_false
  2265 000013A8 [0200000000000000] 
  2266                                  .L_exit:
  2267 000013B0 C9                              leave
  2268 000013B1 C21800                          ret AND_KILL_FRAME(1)
  2269                                  
  2270                                  L_code_ptr_is_interned_symbol:
  2271 000013B4 C8000000                        enter 0, 0
  2272 000013B8 48837D1801                      cmp COUNT, 1
  2273 000013BD 0F85F7100000                    jne L_error_arg_count_1
  2274 000013C3 488B4520                        mov rax, PARAM(0)
  2275 000013C7 803841                          cmp byte [rax], T_interned_symbol
  2276 000013CA 750C                            jne .L_false
  2277 000013CC 48B8-                           mov rax, sob_boolean_true
  2277 000013CE [0300000000000000] 
  2278 000013D6 EB0A                            jmp .L_end
  2279                                  .L_false:
  2280 000013D8 48B8-                           mov rax, sob_boolean_false
  2280 000013DA [0200000000000000] 
  2281                                  .L_end:
  2282 000013E2 C9                              leave
  2283 000013E3 C21800                          ret AND_KILL_FRAME(1)
  2284                                  
  2285                                  L_code_ptr_gensym:
  2286 000013E6 C8000000                        enter 0, 0
  2287 000013EA 48837D1800                      cmp COUNT, 0
  2288 000013EF 0F8590100000                    jne L_error_arg_count_0
  2289 000013F5 48FF0425[4E0D0000]              inc qword [gensym_count]
  2290 000013FD BF09000000                      mov rdi, (1 + 8)
  2291 00001402 E861F5FFFF                      call malloc
  2292 00001407 C60042                          mov byte [rax], T_uninterned_symbol
  2293 0000140A 488B0C25[4E0D0000]              mov rcx, qword [gensym_count]
  2294 00001412 48894801                        mov qword [rax + 1], rcx
  2295 00001416 C9                              leave
  2296 00001417 C21000                          ret AND_KILL_FRAME(0)
  2297                                  
  2298                                  L_code_ptr_is_vector:
  2299 0000141A C8000000                        enter 0, 0
  2300 0000141E 48837D1801                      cmp COUNT, 1
  2301 00001423 0F8591100000                    jne L_error_arg_count_1
  2302 00001429 488B4520                        mov rax, PARAM(0)
  2303 0000142D 803822                          cmp byte [rax], T_vector
  2304 00001430 750C                            jne .L_false
  2305 00001432 48B8-                           mov rax, sob_boolean_true
  2305 00001434 [0300000000000000] 
  2306 0000143C EB0A                            jmp .L_end
  2307                                  .L_false:
  2308 0000143E 48B8-                           mov rax, sob_boolean_false
  2308 00001440 [0200000000000000] 
  2309                                  .L_end:
  2310 00001448 C9                              leave
  2311 00001449 C21800                          ret AND_KILL_FRAME(1)
  2312                                  
  2313                                  L_code_ptr_is_closure:
  2314 0000144C C8000000                        enter 0, 0
  2315 00001450 48837D1801                      cmp COUNT, 1
  2316 00001455 0F855F100000                    jne L_error_arg_count_1
  2317 0000145B 488B4520                        mov rax, PARAM(0)
  2318 0000145F 803804                          cmp byte [rax], T_closure
  2319 00001462 750C                            jne .L_false
  2320 00001464 48B8-                           mov rax, sob_boolean_true
  2320 00001466 [0300000000000000] 
  2321 0000146E EB0A                            jmp .L_end
  2322                                  .L_false:
  2323 00001470 48B8-                           mov rax, sob_boolean_false
  2323 00001472 [0200000000000000] 
  2324                                  .L_end:
  2325 0000147A C9                              leave
  2326 0000147B C21800                          ret AND_KILL_FRAME(1)
  2327                                  
  2328                                  L_code_ptr_is_real:
  2329 0000147E C8000000                        enter 0, 0
  2330 00001482 48837D1801                      cmp COUNT, 1
  2331 00001487 0F852D100000                    jne L_error_arg_count_1
  2332 0000148D 488B4520                        mov rax, PARAM(0)
  2333 00001491 803813                          cmp byte [rax], T_real
  2334 00001494 750C                            jne .L_false
  2335 00001496 48B8-                           mov rax, sob_boolean_true
  2335 00001498 [0300000000000000] 
  2336 000014A0 EB0A                            jmp .L_end
  2337                                  .L_false:
  2338 000014A2 48B8-                           mov rax, sob_boolean_false
  2338 000014A4 [0200000000000000] 
  2339                                  .L_end:
  2340 000014AC C9                              leave
  2341 000014AD C21800                          ret AND_KILL_FRAME(1)
  2342                                  
  2343                                  L_code_ptr_is_fraction:
  2344 000014B0 C8000000                        enter 0, 0
  2345 000014B4 48837D1801                      cmp COUNT, 1
  2346 000014B9 0F85FB0F0000                    jne L_error_arg_count_1
  2347 000014BF 488B4520                        mov rax, PARAM(0)
  2348 000014C3 803812                          cmp byte [rax], T_fraction
  2349 000014C6 750C                            jne .L_false
  2350 000014C8 48B8-                           mov rax, sob_boolean_true
  2350 000014CA [0300000000000000] 
  2351 000014D2 EB0A                            jmp .L_end
  2352                                  .L_false:
  2353 000014D4 48B8-                           mov rax, sob_boolean_false
  2353 000014D6 [0200000000000000] 
  2354                                  .L_end:
  2355 000014DE C9                              leave
  2356 000014DF C21800                          ret AND_KILL_FRAME(1)
  2357                                  
  2358                                  L_code_ptr_is_boolean:
  2359 000014E2 C8000000                        enter 0, 0
  2360 000014E6 48837D1801                      cmp COUNT, 1
  2361 000014EB 0F85C90F0000                    jne L_error_arg_count_1
  2362 000014F1 488B4520                        mov rax, PARAM(0)
  2363 000014F5 8A18                            mov bl, byte [rax]
  2364 000014F7 80E308                          and bl, T_boolean
  2365 000014FA 740C                            je .L_false
  2366 000014FC 48B8-                           mov rax, sob_boolean_true
  2366 000014FE [0300000000000000] 
  2367 00001506 EB0A                            jmp .L_end
  2368                                  .L_false:
  2369 00001508 48B8-                           mov rax, sob_boolean_false
  2369 0000150A [0200000000000000] 
  2370                                  .L_end:
  2371 00001512 C9                              leave
  2372 00001513 C21800                          ret AND_KILL_FRAME(1)
  2373                                          
  2374                                  L_code_ptr_is_boolean_false:
  2375 00001516 C8000000                        enter 0, 0
  2376 0000151A 48837D1801                      cmp COUNT, 1
  2377 0000151F 0F85950F0000                    jne L_error_arg_count_1
  2378 00001525 488B4520                        mov rax, PARAM(0)
  2379 00001529 8A18                            mov bl, byte [rax]
  2380 0000152B 80FB09                          cmp bl, T_boolean_false
  2381 0000152E 750C                            jne .L_false
  2382 00001530 48B8-                           mov rax, sob_boolean_true
  2382 00001532 [0300000000000000] 
  2383 0000153A EB0A                            jmp .L_end
  2384                                  .L_false:
  2385 0000153C 48B8-                           mov rax, sob_boolean_false
  2385 0000153E [0200000000000000] 
  2386                                  .L_end:
  2387 00001546 C9                              leave
  2388 00001547 C21800                          ret AND_KILL_FRAME(1)
  2389                                  
  2390                                  L_code_ptr_is_boolean_true:
  2391 0000154A C8000000                        enter 0, 0
  2392 0000154E 48837D1801                      cmp COUNT, 1
  2393 00001553 0F85610F0000                    jne L_error_arg_count_1
  2394 00001559 488B4520                        mov rax, PARAM(0)
  2395 0000155D 8A18                            mov bl, byte [rax]
  2396 0000155F 80FB0A                          cmp bl, T_boolean_true
  2397 00001562 750C                            jne .L_false
  2398 00001564 48B8-                           mov rax, sob_boolean_true
  2398 00001566 [0300000000000000] 
  2399 0000156E EB0A                            jmp .L_end
  2400                                  .L_false:
  2401 00001570 48B8-                           mov rax, sob_boolean_false
  2401 00001572 [0200000000000000] 
  2402                                  .L_end:
  2403 0000157A C9                              leave
  2404 0000157B C21800                          ret AND_KILL_FRAME(1)
  2405                                  
  2406                                  L_code_ptr_is_number:
  2407 0000157E C8000000                        enter 0, 0
  2408 00001582 48837D1801                      cmp COUNT, 1
  2409 00001587 0F852D0F0000                    jne L_error_arg_count_1
  2410 0000158D 488B4520                        mov rax, PARAM(0)
  2411 00001591 8A18                            mov bl, byte [rax]
  2412 00001593 80E310                          and bl, T_number
  2413 00001596 740C                            jz .L_false
  2414 00001598 48B8-                           mov rax, sob_boolean_true
  2414 0000159A [0300000000000000] 
  2415 000015A2 EB0A                            jmp .L_end
  2416                                  .L_false:
  2417 000015A4 48B8-                           mov rax, sob_boolean_false
  2417 000015A6 [0200000000000000] 
  2418                                  .L_end:
  2419 000015AE C9                              leave
  2420 000015AF C21800                          ret AND_KILL_FRAME(1)
  2421                                          
  2422                                  L_code_ptr_is_collection:
  2423 000015B2 C8000000                        enter 0, 0
  2424 000015B6 48837D1801                      cmp COUNT, 1
  2425 000015BB 0F85F90E0000                    jne L_error_arg_count_1
  2426 000015C1 488B4520                        mov rax, PARAM(0)
  2427 000015C5 8A18                            mov bl, byte [rax]
  2428 000015C7 80E320                          and bl, T_collection
  2429 000015CA 740C                            je .L_false
  2430 000015CC 48B8-                           mov rax, sob_boolean_true
  2430 000015CE [0300000000000000] 
  2431 000015D6 EB0A                            jmp .L_end
  2432                                  .L_false:
  2433 000015D8 48B8-                           mov rax, sob_boolean_false
  2433 000015DA [0200000000000000] 
  2434                                  .L_end:
  2435 000015E2 C9                              leave
  2436 000015E3 C21800                          ret AND_KILL_FRAME(1)
  2437                                  
  2438                                  L_code_ptr_cons:
  2439 000015E6 C8000000                        enter 0, 0
  2440 000015EA 48837D1802                      cmp COUNT, 2
  2441 000015EF 0F85FA0E0000                    jne L_error_arg_count_2
  2442 000015F5 BF11000000                      mov rdi, (1 + 8 + 8)
  2443 000015FA E869F3FFFF                      call malloc
  2444 000015FF C60021                          mov byte [rax], T_pair
  2445 00001602 488B5D20                        mov rbx, PARAM(0)
  2446 00001606 48895801                        mov SOB_PAIR_CAR(rax), rbx
  2447 0000160A 488B5D28                        mov rbx, PARAM(1)
  2448 0000160E 48895809                        mov SOB_PAIR_CDR(rax), rbx
  2449 00001612 C9                              leave
  2450 00001613 C22000                          ret AND_KILL_FRAME(2)
  2451                                  
  2452                                  L_code_ptr_display_sexpr:
  2453 00001616 C8000000                        enter 0, 0
  2454 0000161A 48837D1801                      cmp COUNT, 1
  2455 0000161F 0F85950E0000                    jne L_error_arg_count_1
  2456 00001625 488B7D20                        mov rdi, PARAM(0)
  2457 00001629 E878F4FFFF                      call print_sexpr
  2458 0000162E 48B8-                           mov rax, sob_void
  2458 00001630 [0000000000000000] 
  2459 00001638 C9                              leave
  2460 00001639 C21800                          ret AND_KILL_FRAME(1)
  2461                                  
  2462                                  L_code_ptr_write_char:
  2463 0000163C C8000000                        enter 0, 0
  2464 00001640 48837D1801                      cmp COUNT, 1
  2465 00001645 0F856F0E0000                    jne L_error_arg_count_1
  2466 0000164B 488B4520                        mov rax, PARAM(0)
  2467                                          assert_char(rax)
    53 0000164F 803802              <1>  cmp byte [%1], %2
    54 00001652 0F85360F0000        <1>  jne L_error_incorrect_type
  2468 00001658 8A4001                          mov al, SOB_CHAR_VALUE(rax)
  2469 0000165B 4825FF000000                    and rax, 255
  2470 00001661 48BF-                           mov rdi, fmt_char
  2470 00001663 [560D000000000000] 
  2471 0000166B 4889C6                          mov rsi, rax
  2472 0000166E B800000000                      mov rax, 0
  2473                                          ENTER
    44 00001673 C8000000            <1>  enter 0, 0
    45 00001677 4883E4F0            <1>  and rsp, ~15
  2474 0000167B E8(00000000)                    call printf
  2475                                          LEAVE
    49 00001680 C9                  <1>  leave
  2476 00001681 48B8-                           mov rax, sob_void
  2476 00001683 [0000000000000000] 
  2477 0000168B C9                              leave
  2478 0000168C C21800                          ret AND_KILL_FRAME(1)
  2479                                  
  2480                                  L_code_ptr_car:
  2481 0000168F C8000000                        enter 0, 0
  2482 00001693 48837D1801                      cmp COUNT, 1
  2483 00001698 0F851C0E0000                    jne L_error_arg_count_1
  2484 0000169E 488B4520                        mov rax, PARAM(0)
  2485                                          assert_pair(rax)
    53 000016A2 803821              <1>  cmp byte [%1], %2
    54 000016A5 0F85E30E0000        <1>  jne L_error_incorrect_type
  2486 000016AB 488B4001                        mov rax, SOB_PAIR_CAR(rax)
  2487 000016AF C9                              leave
  2488 000016B0 C21800                          ret AND_KILL_FRAME(1)
  2489                                          
  2490                                  L_code_ptr_cdr:
  2491 000016B3 C8000000                        enter 0, 0
  2492 000016B7 48837D1801                      cmp COUNT, 1
  2493 000016BC 0F85F80D0000                    jne L_error_arg_count_1
  2494 000016C2 488B4520                        mov rax, PARAM(0)
  2495                                          assert_pair(rax)
    53 000016C6 803821              <1>  cmp byte [%1], %2
    54 000016C9 0F85BF0E0000        <1>  jne L_error_incorrect_type
  2496 000016CF 488B4009                        mov rax, SOB_PAIR_CDR(rax)
  2497 000016D3 C9                              leave
  2498 000016D4 C21800                          ret AND_KILL_FRAME(1)
  2499                                          
  2500                                  L_code_ptr_string_length:
  2501 000016D7 C8000000                        enter 0, 0
  2502 000016DB 48837D1801                      cmp COUNT, 1
  2503 000016E0 0F85D40D0000                    jne L_error_arg_count_1
  2504 000016E6 488B4520                        mov rax, PARAM(0)
  2505                                          assert_string(rax)
    53 000016EA 803803              <1>  cmp byte [%1], %2
    54 000016ED 0F859B0E0000        <1>  jne L_error_incorrect_type
  2506 000016F3 488B7801                        mov rdi, SOB_STRING_LENGTH(rax)
  2507 000016F7 E83E0D0000                      call make_integer
  2508 000016FC C9                              leave
  2509 000016FD C21800                          ret AND_KILL_FRAME(1)
  2510                                  
  2511                                  L_code_ptr_vector_length:
  2512 00001700 C8000000                        enter 0, 0
  2513 00001704 48837D1801                      cmp COUNT, 1
  2514 00001709 0F85AB0D0000                    jne L_error_arg_count_1
  2515 0000170F 488B4520                        mov rax, PARAM(0)
  2516                                          assert_vector(rax)
    53 00001713 803822              <1>  cmp byte [%1], %2
    54 00001716 0F85720E0000        <1>  jne L_error_incorrect_type
  2517 0000171C 488B7801                        mov rdi, SOB_VECTOR_LENGTH(rax)
  2518 00001720 E8150D0000                      call make_integer
  2519 00001725 C9                              leave
  2520 00001726 C21800                          ret AND_KILL_FRAME(1)
  2521                                  
  2522                                  L_code_ptr_real_to_integer:
  2523 00001729 C8000000                        enter 0, 0
  2524 0000172D 48837D1801                      cmp COUNT, 1
  2525 00001732 0F85820D0000                    jne L_error_arg_count_1
  2526 00001738 488B5D20                        mov rbx, PARAM(0)
  2527                                          assert_real(rbx)
    53 0000173C 803B13              <1>  cmp byte [%1], %2
    54 0000173F 0F85490E0000        <1>  jne L_error_incorrect_type
  2528 00001745 F20F104301                      movsd xmm0, qword [rbx + 1]
  2529 0000174A F2480F2CF8                      cvttsd2si rdi, xmm0
  2530 0000174F E8E60C0000                      call make_integer
  2531 00001754 C9                              leave
  2532 00001755 C21800                          ret AND_KILL_FRAME(1)
  2533                                  
  2534                                  L_code_ptr_exit:
  2535 00001758 C8000000                        enter 0, 0
  2536 0000175C 48837D1800                      cmp COUNT, 0
  2537 00001761 0F851E0D0000                    jne L_error_arg_count_0
  2538 00001767 B800000000                      mov rax, 0
  2539 0000176C E8(00000000)                    call exit
  2540                                  
  2541                                  L_code_ptr_integer_to_real:
  2542 00001771 C8000000                        enter 0, 0
  2543 00001775 48837D1801                      cmp COUNT, 1
  2544 0000177A 0F853A0D0000                    jne L_error_arg_count_1
  2545 00001780 488B4520                        mov rax, PARAM(0)
  2546                                          assert_integer(rax)
    53 00001784 803811              <1>  cmp byte [%1], %2
    54 00001787 0F85010E0000        <1>  jne L_error_incorrect_type
  2547 0000178D FF7001                          push qword [rax + 1]
  2548 00001790 F2480F2A0424                    cvtsi2sd xmm0, qword [rsp]
  2549 00001796 E8870C0000                      call make_real
  2550 0000179B C9                              leave
  2551 0000179C C21800                          ret AND_KILL_FRAME(1)
  2552                                  
  2553                                  L_code_ptr_fraction_to_real:
  2554 0000179F C8000000                        enter 0, 0
  2555 000017A3 48837D1801                      cmp COUNT, 1
  2556 000017A8 0F850C0D0000                    jne L_error_arg_count_1
  2557 000017AE 488B4520                        mov rax, PARAM(0)
  2558                                          assert_fraction(rax)
    53 000017B2 803812              <1>  cmp byte [%1], %2
    54 000017B5 0F85D30D0000        <1>  jne L_error_incorrect_type
  2559 000017BB FF7001                          push qword [rax + 1]
  2560 000017BE F2480F2A0424                    cvtsi2sd xmm0, qword [rsp]
  2561 000017C4 FF7009                          push qword [rax + 1 + 8]
  2562 000017C7 F2480F2A0C24                    cvtsi2sd xmm1, qword [rsp]
  2563 000017CD F20F5EC1                        divsd xmm0, xmm1
  2564 000017D1 E84C0C0000                      call make_real
  2565 000017D6 C9                              leave
  2566 000017D7 C21800                          ret AND_KILL_FRAME(1)
  2567                                  
  2568                                  L_code_ptr_char_to_integer:
  2569 000017DA C8000000                        enter 0, 0
  2570 000017DE 48837D1801                      cmp COUNT, 1
  2571 000017E3 0F85D10C0000                    jne L_error_arg_count_1
  2572 000017E9 488B4520                        mov rax, PARAM(0)
  2573                                          assert_char(rax)
    53 000017ED 803802              <1>  cmp byte [%1], %2
    54 000017F0 0F85980D0000        <1>  jne L_error_incorrect_type
  2574 000017F6 8A4001                          mov al, byte [rax + 1]
  2575 000017F9 4825FF000000                    and rax, 255
  2576 000017FF 4889C7                          mov rdi, rax
  2577 00001802 E8330C0000                      call make_integer
  2578 00001807 C9                              leave
  2579 00001808 C21800                          ret AND_KILL_FRAME(1)
  2580                                  
  2581                                  L_code_ptr_integer_to_fraction:
  2582 0000180B C8000000                        enter 0, 0
  2583 0000180F 48837D1801                      cmp COUNT, 1
  2584 00001814 0F85A00C0000                    jne L_error_arg_count_1
  2585 0000181A 4C8B4520                        mov r8, PARAM(0)
  2586                                          assert_integer(r8)
    53 0000181E 41803811            <1>  cmp byte [%1], %2
    54 00001822 0F85660D0000        <1>  jne L_error_incorrect_type
  2587 00001828 BF11000000                      mov rdi, (1 + 8 + 8)
  2588 0000182D E836F1FFFF                      call malloc
  2589 00001832 498B5801                        mov rbx, qword [r8 + 1]
  2590 00001836 C60012                          mov byte [rax], T_fraction
  2591 00001839 48895801                        mov qword [rax + 1], rbx
  2592 0000183D 48C7400901000000                mov qword [rax + 1 + 8], 1
  2593 00001845 C9                              leave
  2594 00001846 C21800                          ret AND_KILL_FRAME(1)
  2595                                  
  2596                                  L_code_ptr_integer_to_char:
  2597 00001849 C8000000                        enter 0, 0
  2598 0000184D 48837D1801                      cmp COUNT, 1
  2599 00001852 0F85620C0000                    jne L_error_arg_count_1
  2600 00001858 488B4520                        mov rax, PARAM(0)
  2601                                          assert_integer(rax)
    53 0000185C 803811              <1>  cmp byte [%1], %2
    54 0000185F 0F85290D0000        <1>  jne L_error_incorrect_type
  2602 00001865 488B5801                        mov rbx, qword [rax + 1]
  2603 00001869 4883FB00                        cmp rbx, 0
  2604 0000186D 0F8EE10B0000                    jle L_error_integer_range
  2605 00001873 4881FB00010000                  cmp rbx, 256
  2606 0000187A 0F8DD40B0000                    jge L_error_integer_range
  2607 00001880 BF02000000                      mov rdi, (1 + 1)
  2608 00001885 E8DEF0FFFF                      call malloc
  2609 0000188A C60002                          mov byte [rax], T_char
  2610 0000188D 885801                          mov byte [rax + 1], bl
  2611 00001890 C9                              leave
  2612 00001891 C21800                          ret AND_KILL_FRAME(1)
  2613                                  
  2614                                  L_code_ptr_trng:
  2615 00001894 C8000000                        enter 0, 0
  2616 00001898 48837D1800                      cmp COUNT, 0
  2617 0000189D 0F85E20B0000                    jne L_error_arg_count_0
  2618 000018A3 480FC7F7                        rdrand rdi
  2619 000018A7 48D1EF                          shr rdi, 1
  2620 000018AA E88B0B0000                      call make_integer
  2621 000018AF C9                              leave
  2622 000018B0 C21000                          ret AND_KILL_FRAME(0)
  2623                                  
  2624                                  L_code_ptr_is_zero:
  2625 000018B3 C8000000                        enter 0, 0
  2626 000018B7 48837D1801                      cmp COUNT, 1
  2627 000018BC 0F85F80B0000                    jne L_error_arg_count_1
  2628 000018C2 488B4520                        mov rax, PARAM(0)
  2629 000018C6 803811                          cmp byte [rax], T_integer
  2630 000018C9 740F                            je .L_integer
  2631 000018CB 803812                          cmp byte [rax], T_fraction
  2632 000018CE 7413                            je .L_fraction
  2633 000018D0 803813                          cmp byte [rax], T_real
  2634 000018D3 7417                            je .L_real
  2635 000018D5 E9B40C0000                      jmp L_error_incorrect_type
  2636                                  .L_integer:
  2637 000018DA 4883780100                      cmp qword [rax + 1], 0
  2638 000018DF 7429                            je .L_zero
  2639 000018E1 EB1B                            jmp .L_not_zero
  2640                                  .L_fraction:
  2641 000018E3 4883780100                      cmp qword [rax + 1], 0
  2642 000018E8 7420                            je .L_zero
  2643 000018EA EB12                            jmp .L_not_zero
  2644                                  .L_real:
  2645 000018EC 660FEFC0                        pxor xmm0, xmm0
  2646 000018F0 FF7001                          push qword [rax + 1]
  2647 000018F3 F20F100C24                      movsd xmm1, qword [rsp]
  2648 000018F8 660F2EC1                        ucomisd xmm0, xmm1
  2649 000018FC 740C                            je .L_zero
  2650                                  .L_not_zero:
  2651 000018FE 48B8-                           mov rax, sob_boolean_false
  2651 00001900 [0200000000000000] 
  2652 00001908 EB0A                            jmp .L_end
  2653                                  .L_zero:
  2654 0000190A 48B8-                           mov rax, sob_boolean_true
  2654 0000190C [0300000000000000] 
  2655                                  .L_end:
  2656 00001914 C9                              leave
  2657 00001915 C21800                          ret AND_KILL_FRAME(1)
  2658                                  
  2659                                  L_code_ptr_is_integer:
  2660 00001918 C8000000                        enter 0, 0
  2661 0000191C 48837D1801                      cmp COUNT, 1
  2662 00001921 0F85930B0000                    jne L_error_arg_count_1
  2663 00001927 488B4520                        mov rax, PARAM(0)
  2664 0000192B 803811                          cmp byte [rax], T_integer
  2665 0000192E 750C                            jne .L_false
  2666 00001930 48B8-                           mov rax, sob_boolean_true
  2666 00001932 [0300000000000000] 
  2667 0000193A EB0A                            jmp .L_exit
  2668                                  .L_false:
  2669 0000193C 48B8-                           mov rax, sob_boolean_false
  2669 0000193E [0200000000000000] 
  2670                                  .L_exit:
  2671 00001946 C9                              leave
  2672 00001947 C21800                          ret AND_KILL_FRAME(1)
  2673                                  
  2674                                  L_code_ptr_raw_bin_add_rr:
  2675 0000194A C8000000                        enter 0, 0
  2676 0000194E 48837D1802                      cmp COUNT, 2
  2677 00001953 0F85960B0000                    jne L_error_arg_count_2
  2678 00001959 488B5D20                        mov rbx, PARAM(0)
  2679                                          assert_real(rbx)
    53 0000195D 803B13              <1>  cmp byte [%1], %2
    54 00001960 0F85280C0000        <1>  jne L_error_incorrect_type
  2680 00001966 488B4D28                        mov rcx, PARAM(1)
  2681                                          assert_real(rcx)
    53 0000196A 803913              <1>  cmp byte [%1], %2
    54 0000196D 0F851B0C0000        <1>  jne L_error_incorrect_type
  2682 00001973 F20F104301                      movsd xmm0, qword [rbx + 1]
  2683 00001978 F20F104901                      movsd xmm1, qword [rcx + 1]
  2684 0000197D F20F58C1                        addsd xmm0, xmm1
  2685 00001981 E89C0A0000                      call make_real
  2686 00001986 C9                              leave
  2687 00001987 C22000                          ret AND_KILL_FRAME(2)
  2688                                  
  2689                                  L_code_ptr_raw_bin_sub_rr:
  2690 0000198A C8000000                        enter 0, 0
  2691 0000198E 48837D1802                      cmp COUNT, 2
  2692 00001993 0F85560B0000                    jne L_error_arg_count_2
  2693 00001999 488B5D20                        mov rbx, PARAM(0)
  2694                                          assert_real(rbx)
    53 0000199D 803B13              <1>  cmp byte [%1], %2
    54 000019A0 0F85E80B0000        <1>  jne L_error_incorrect_type
  2695 000019A6 488B4D28                        mov rcx, PARAM(1)
  2696                                          assert_real(rcx)
    53 000019AA 803913              <1>  cmp byte [%1], %2
    54 000019AD 0F85DB0B0000        <1>  jne L_error_incorrect_type
  2697 000019B3 F20F104301                      movsd xmm0, qword [rbx + 1]
  2698 000019B8 F20F104901                      movsd xmm1, qword [rcx + 1]
  2699 000019BD F20F5CC1                        subsd xmm0, xmm1
  2700 000019C1 E85C0A0000                      call make_real
  2701 000019C6 C9                              leave
  2702 000019C7 C22000                          ret AND_KILL_FRAME(2)
  2703                                  
  2704                                  L_code_ptr_raw_bin_mul_rr:
  2705 000019CA C8000000                        enter 0, 0
  2706 000019CE 48837D1802                      cmp COUNT, 2
  2707 000019D3 0F85160B0000                    jne L_error_arg_count_2
  2708 000019D9 488B5D20                        mov rbx, PARAM(0)
  2709                                          assert_real(rbx)
    53 000019DD 803B13              <1>  cmp byte [%1], %2
    54 000019E0 0F85A80B0000        <1>  jne L_error_incorrect_type
  2710 000019E6 488B4D28                        mov rcx, PARAM(1)
  2711                                          assert_real(rcx)
    53 000019EA 803913              <1>  cmp byte [%1], %2
    54 000019ED 0F859B0B0000        <1>  jne L_error_incorrect_type
  2712 000019F3 F20F104301                      movsd xmm0, qword [rbx + 1]
  2713 000019F8 F20F104901                      movsd xmm1, qword [rcx + 1]
  2714 000019FD F20F59C1                        mulsd xmm0, xmm1
  2715 00001A01 E81C0A0000                      call make_real
  2716 00001A06 C9                              leave
  2717 00001A07 C22000                          ret AND_KILL_FRAME(2)
  2718                                  
  2719                                  L_code_ptr_raw_bin_div_rr:
  2720 00001A0A C8000000                        enter 0, 0
  2721 00001A0E 48837D1802                      cmp COUNT, 2
  2722 00001A13 0F85D60A0000                    jne L_error_arg_count_2
  2723 00001A19 488B5D20                        mov rbx, PARAM(0)
  2724                                          assert_real(rbx)
    53 00001A1D 803B13              <1>  cmp byte [%1], %2
    54 00001A20 0F85680B0000        <1>  jne L_error_incorrect_type
  2725 00001A26 488B4D28                        mov rcx, PARAM(1)
  2726                                          assert_real(rcx)
    53 00001A2A 803913              <1>  cmp byte [%1], %2
    54 00001A2D 0F855B0B0000        <1>  jne L_error_incorrect_type
  2727 00001A33 F20F104301                      movsd xmm0, qword [rbx + 1]
  2728 00001A38 F20F104901                      movsd xmm1, qword [rcx + 1]
  2729 00001A3D 660FEFD2                        pxor xmm2, xmm2
  2730 00001A41 660F2ECA                        ucomisd xmm1, xmm2
  2731 00001A45 0F84740B0000                    je L_error_division_by_zero
  2732 00001A4B F20F5EC1                        divsd xmm0, xmm1
  2733 00001A4F E8CE090000                      call make_real
  2734 00001A54 C9                              leave
  2735 00001A55 C22000                          ret AND_KILL_FRAME(2)
  2736                                  
  2737                                  L_code_ptr_raw_bin_add_zz:
  2738 00001A58 C8000000                	enter 0, 0
  2739 00001A5C 48837D1802              	cmp COUNT, 2
  2740 00001A61 0F85880A0000            	jne L_error_arg_count_2
  2741 00001A67 4C8B4520                	mov r8, PARAM(0)
  2742                                  	assert_integer(r8)
    53 00001A6B 41803811            <1>  cmp byte [%1], %2
    54 00001A6F 0F85190B0000        <1>  jne L_error_incorrect_type
  2743 00001A75 4C8B4D28                	mov r9, PARAM(1)
  2744                                  	assert_integer(r9)
    53 00001A79 41803911            <1>  cmp byte [%1], %2
    54 00001A7D 0F850B0B0000        <1>  jne L_error_incorrect_type
  2745 00001A83 498B7801                	mov rdi, qword [r8 + 1]
  2746 00001A87 49037901                	add rdi, qword [r9 + 1]
  2747 00001A8B E8AA090000              	call make_integer
  2748 00001A90 C9                      	leave
  2749 00001A91 C22000                  	ret AND_KILL_FRAME(2)
  2750                                  	
  2751                                  L_code_ptr_raw_bin_add_qq:
  2752 00001A94 C8000000                        enter 0, 0
  2753 00001A98 48837D1802                      cmp COUNT, 2
  2754 00001A9D 0F854C0A0000                    jne L_error_arg_count_2
  2755 00001AA3 4C8B4520                        mov r8, PARAM(0)
  2756                                          assert_fraction(r8)
    53 00001AA7 41803812            <1>  cmp byte [%1], %2
    54 00001AAB 0F85DD0A0000        <1>  jne L_error_incorrect_type
  2757 00001AB1 4C8B4D28                        mov r9, PARAM(1)
  2758                                          assert_fraction(r9)
    53 00001AB5 41803912            <1>  cmp byte [%1], %2
    54 00001AB9 0F85CF0A0000        <1>  jne L_error_incorrect_type
  2759 00001ABF 498B4001                        mov rax, qword [r8 + 1] ; num1
  2760 00001AC3 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
  2761 00001AC7 4899                            cqo
  2762 00001AC9 48F7EB                          imul rbx
  2763 00001ACC 4889C6                          mov rsi, rax
  2764 00001ACF 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  2765 00001AD3 498B5901                        mov rbx, qword [r9 + 1]     ; num2
  2766 00001AD7 4899                            cqo
  2767 00001AD9 48F7EB                          imul rbx
  2768 00001ADC 4801C6                          add rsi, rax
  2769 00001ADF 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  2770 00001AE3 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
  2771 00001AE7 4899                            cqo
  2772 00001AE9 48F7EB                          imul rbx
  2773 00001AEC 4889C7                          mov rdi, rax
  2774 00001AEF E8DE010000                      call normalize_fraction
  2775 00001AF4 C9                              leave
  2776 00001AF5 C22000                          ret AND_KILL_FRAME(2)
  2777                                  
  2778                                  L_code_ptr_raw_bin_sub_zz:
  2779 00001AF8 C8000000                	enter 0, 0
  2780 00001AFC 48837D1802              	cmp COUNT, 2
  2781 00001B01 0F85E8090000            	jne L_error_arg_count_2
  2782 00001B07 4C8B4520                	mov r8, PARAM(0)
  2783                                  	assert_integer(r8)
    53 00001B0B 41803811            <1>  cmp byte [%1], %2
    54 00001B0F 0F85790A0000        <1>  jne L_error_incorrect_type
  2784 00001B15 4C8B4D28                	mov r9, PARAM(1)
  2785                                  	assert_integer(r9)
    53 00001B19 41803911            <1>  cmp byte [%1], %2
    54 00001B1D 0F856B0A0000        <1>  jne L_error_incorrect_type
  2786 00001B23 498B7801                	mov rdi, qword [r8 + 1]
  2787 00001B27 492B7901                	sub rdi, qword [r9 + 1]
  2788 00001B2B E80A090000              	call make_integer
  2789 00001B30 C9                      	leave
  2790 00001B31 C22000                  	ret AND_KILL_FRAME(2)
  2791                                  
  2792                                  L_code_ptr_raw_bin_sub_qq:
  2793 00001B34 C8000000                        enter 0, 0
  2794 00001B38 48837D1802                      cmp COUNT, 2
  2795 00001B3D 0F85AC090000                    jne L_error_arg_count_2
  2796 00001B43 4C8B4520                        mov r8, PARAM(0)
  2797                                          assert_fraction(r8)
    53 00001B47 41803812            <1>  cmp byte [%1], %2
    54 00001B4B 0F853D0A0000        <1>  jne L_error_incorrect_type
  2798 00001B51 4C8B4D28                        mov r9, PARAM(1)
  2799                                          assert_fraction(r9)
    53 00001B55 41803912            <1>  cmp byte [%1], %2
    54 00001B59 0F852F0A0000        <1>  jne L_error_incorrect_type
  2800 00001B5F 498B4001                        mov rax, qword [r8 + 1] ; num1
  2801 00001B63 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
  2802 00001B67 4899                            cqo
  2803 00001B69 48F7EB                          imul rbx
  2804 00001B6C 4889C6                          mov rsi, rax
  2805 00001B6F 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  2806 00001B73 498B5901                        mov rbx, qword [r9 + 1]     ; num2
  2807 00001B77 4899                            cqo
  2808 00001B79 48F7EB                          imul rbx
  2809 00001B7C 4829C6                          sub rsi, rax
  2810 00001B7F 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  2811 00001B83 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
  2812 00001B87 4899                            cqo
  2813 00001B89 48F7EB                          imul rbx
  2814 00001B8C 4889C7                          mov rdi, rax
  2815 00001B8F E83E010000                      call normalize_fraction
  2816 00001B94 C9                              leave
  2817 00001B95 C22000                          ret AND_KILL_FRAME(2)
  2818                                  
  2819                                  L_code_ptr_raw_bin_mul_zz:
  2820 00001B98 C8000000                	enter 0, 0
  2821 00001B9C 48837D1802              	cmp COUNT, 2
  2822 00001BA1 0F8548090000            	jne L_error_arg_count_2
  2823 00001BA7 4C8B4520                	mov r8, PARAM(0)
  2824                                  	assert_integer(r8)
    53 00001BAB 41803811            <1>  cmp byte [%1], %2
    54 00001BAF 0F85D9090000        <1>  jne L_error_incorrect_type
  2825 00001BB5 4C8B4D28                	mov r9, PARAM(1)
  2826                                  	assert_integer(r9)
    53 00001BB9 41803911            <1>  cmp byte [%1], %2
    54 00001BBD 0F85CB090000        <1>  jne L_error_incorrect_type
  2827 00001BC3 4899                    	cqo
  2828 00001BC5 498B4001                	mov rax, qword [r8 + 1]
  2829 00001BC9 49F76101                	mul qword [r9 + 1]
  2830 00001BCD 4889C7                  	mov rdi, rax
  2831 00001BD0 E865080000              	call make_integer
  2832 00001BD5 C9                      	leave
  2833 00001BD6 C22000                  	ret AND_KILL_FRAME(2)
  2834                                  
  2835                                  L_code_ptr_raw_bin_mul_qq:
  2836 00001BD9 C8000000                        enter 0, 0
  2837 00001BDD 48837D1802                      cmp COUNT, 2
  2838 00001BE2 0F8507090000                    jne L_error_arg_count_2
  2839 00001BE8 4C8B4520                        mov r8, PARAM(0)
  2840                                          assert_fraction(r8)
    53 00001BEC 41803812            <1>  cmp byte [%1], %2
    54 00001BF0 0F8598090000        <1>  jne L_error_incorrect_type
  2841 00001BF6 4C8B4D28                        mov r9, PARAM(1)
  2842                                          assert_fraction(r9)
    53 00001BFA 41803912            <1>  cmp byte [%1], %2
    54 00001BFE 0F858A090000        <1>  jne L_error_incorrect_type
  2843 00001C04 498B4001                        mov rax, qword [r8 + 1] ; num1
  2844 00001C08 498B5901                        mov rbx, qword [r9 + 1] ; num2
  2845 00001C0C 4899                            cqo
  2846 00001C0E 48F7EB                          imul rbx
  2847 00001C11 4889C6                          mov rsi, rax
  2848 00001C14 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  2849 00001C18 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den2
  2850 00001C1C 4899                            cqo
  2851 00001C1E 48F7EB                          imul rbx
  2852 00001C21 4889C7                          mov rdi, rax
  2853 00001C24 E8A9000000                      call normalize_fraction
  2854 00001C29 C9                              leave
  2855 00001C2A C22000                          ret AND_KILL_FRAME(2)
  2856                                          
  2857                                  L_code_ptr_raw_bin_div_zz:
  2858 00001C2D C8000000                	enter 0, 0
  2859 00001C31 48837D1802              	cmp COUNT, 2
  2860 00001C36 0F85B3080000            	jne L_error_arg_count_2
  2861 00001C3C 4C8B4520                	mov r8, PARAM(0)
  2862                                  	assert_integer(r8)
    53 00001C40 41803811            <1>  cmp byte [%1], %2
    54 00001C44 0F8544090000        <1>  jne L_error_incorrect_type
  2863 00001C4A 4C8B4D28                	mov r9, PARAM(1)
  2864                                  	assert_integer(r9)
    53 00001C4E 41803911            <1>  cmp byte [%1], %2
    54 00001C52 0F8536090000        <1>  jne L_error_incorrect_type
  2865 00001C58 498B7901                	mov rdi, qword [r9 + 1]
  2866 00001C5C 4883FF00                	cmp rdi, 0
  2867 00001C60 0F8459090000            	je L_error_division_by_zero
  2868 00001C66 498B7001                	mov rsi, qword [r8 + 1]
  2869 00001C6A E863000000              	call normalize_fraction
  2870 00001C6F C9                      	leave
  2871 00001C70 C22000                  	ret AND_KILL_FRAME(2)
  2872                                  
  2873                                  L_code_ptr_raw_bin_div_qq:
  2874 00001C73 C8000000                        enter 0, 0
  2875 00001C77 48837D1802                      cmp COUNT, 2
  2876 00001C7C 0F856D080000                    jne L_error_arg_count_2
  2877 00001C82 4C8B4520                        mov r8, PARAM(0)
  2878                                          assert_fraction(r8)
    53 00001C86 41803812            <1>  cmp byte [%1], %2
    54 00001C8A 0F85FE080000        <1>  jne L_error_incorrect_type
  2879 00001C90 4C8B4D28                        mov r9, PARAM(1)
  2880                                          assert_fraction(r9)
    53 00001C94 41803912            <1>  cmp byte [%1], %2
    54 00001C98 0F85F0080000        <1>  jne L_error_incorrect_type
  2881 00001C9E 4983790100                      cmp qword [r9 + 1], 0
  2882 00001CA3 0F8416090000                    je L_error_division_by_zero
  2883 00001CA9 498B4001                        mov rax, qword [r8 + 1] ; num1
  2884 00001CAD 498B5909                        mov rbx, qword [r9 + 1 + 8] ; den 2
  2885 00001CB1 4899                            cqo
  2886 00001CB3 48F7EB                          imul rbx
  2887 00001CB6 4889C6                          mov rsi, rax
  2888 00001CB9 498B4009                        mov rax, qword [r8 + 1 + 8] ; den1
  2889 00001CBD 498B5901                        mov rbx, qword [r9 + 1] ; num2
  2890 00001CC1 4899                            cqo
  2891 00001CC3 48F7EB                          imul rbx
  2892 00001CC6 4889C7                          mov rdi, rax
  2893 00001CC9 E804000000                      call normalize_fraction
  2894 00001CCE C9                              leave
  2895 00001CCF C22000                          ret AND_KILL_FRAME(2)
  2896                                          
  2897                                  normalize_fraction:
  2898 00001CD2 56                              push rsi
  2899 00001CD3 57                              push rdi
  2900 00001CD4 E859000000                      call gcd
  2901 00001CD9 4889C3                          mov rbx, rax
  2902 00001CDC 58                              pop rax
  2903 00001CDD 4899                            cqo
  2904 00001CDF 48F7FB                          idiv rbx
  2905 00001CE2 4989C0                          mov r8, rax
  2906 00001CE5 58                              pop rax
  2907 00001CE6 4899                            cqo
  2908 00001CE8 48F7FB                          idiv rbx
  2909 00001CEB 4989C1                          mov r9, rax
  2910 00001CEE 4983F900                        cmp r9, 0
  2911 00001CF2 741C                            je .L_zero
  2912 00001CF4 4983F801                        cmp r8, 1
  2913 00001CF8 7421                            je .L_int
  2914 00001CFA BF11000000                      mov rdi, (1 + 8 + 8)
  2915 00001CFF E864ECFFFF                      call malloc
  2916 00001D04 C60012                          mov byte [rax], T_fraction
  2917 00001D07 4C894801                        mov qword [rax + 1], r9
  2918 00001D0B 4C894009                        mov qword [rax + 1 + 8], r8
  2919 00001D0F C3                              ret
  2920                                  .L_zero:
  2921 00001D10 BF00000000                      mov rdi, 0
  2922 00001D15 E820070000                      call make_integer
  2923 00001D1A C3                              ret
  2924                                  .L_int:
  2925 00001D1B 4C89CF                          mov rdi, r9
  2926 00001D1E E817070000                      call make_integer
  2927 00001D23 C3                              ret
  2928                                  
  2929                                  iabs:
  2930 00001D24 4889F8                          mov rax, rdi
  2931 00001D27 4883F800                        cmp rax, 0
  2932 00001D2B 7C01                            jl .Lneg
  2933 00001D2D C3                              ret
  2934                                  .Lneg:
  2935 00001D2E 48F7D8                          neg rax
  2936 00001D31 C3                              ret
  2937                                  
  2938                                  gcd:
  2939 00001D32 E8EDFFFFFF                      call iabs
  2940 00001D37 4889C3                          mov rbx, rax
  2941 00001D3A 4889F7                          mov rdi, rsi
  2942 00001D3D E8E2FFFFFF                      call iabs
  2943 00001D42 4883F800                        cmp rax, 0
  2944 00001D46 7502                            jne .L0
  2945 00001D48 4893                            xchg rax, rbx
  2946                                  .L0:
  2947 00001D4A 4883FB00                        cmp rbx, 0
  2948 00001D4E 740C                            je .L1
  2949 00001D50 4899                            cqo
  2950 00001D52 48F7F3                          div rbx
  2951 00001D55 4889D0                          mov rax, rdx
  2952 00001D58 4893                            xchg rax, rbx
  2953 00001D5A EBEE                            jmp .L0
  2954                                  .L1:
  2955 00001D5C C3                              ret
  2956                                  
  2957                                  L_code_ptr_error:
  2958 00001D5D C8000000                        enter 0, 0
  2959 00001D61 48837D1802                      cmp COUNT, 2
  2960 00001D66 0F8583070000                    jne L_error_arg_count_2
  2961 00001D6C 488B7520                        mov rsi, PARAM(0)
  2962                                          assert_interned_symbol(rsi)
    53 00001D70 803E41              <1>  cmp byte [%1], %2
    54 00001D73 0F8515080000        <1>  jne L_error_incorrect_type
  2963 00001D79 488B7528                        mov rsi, PARAM(1)
  2964                                          assert_string(rsi)
    53 00001D7D 803E03              <1>  cmp byte [%1], %2
    54 00001D80 0F8508080000        <1>  jne L_error_incorrect_type
  2965 00001D86 48BF-                           mov rdi, fmt_scheme_error_part_1
  2965 00001D88 [8E0E000000000000] 
  2966 00001D90 B800000000                      mov rax, 0
  2967                                          ENTER
    44 00001D95 C8000000            <1>  enter 0, 0
    45 00001D99 4883E4F0            <1>  and rsp, ~15
  2968 00001D9D E8(00000000)                    call printf
  2969                                          LEAVE
    49 00001DA2 C9                  <1>  leave
  2970 00001DA3 488B7D20                        mov rdi, PARAM(0)
  2971 00001DA7 E8FAECFFFF                      call print_sexpr
  2972 00001DAC 48BF-                           mov rdi, fmt_scheme_error_part_2
  2972 00001DAE [A20E000000000000] 
  2973 00001DB6 B800000000                      mov rax, 0
  2974                                          ENTER
    44 00001DBB C8000000            <1>  enter 0, 0
    45 00001DBF 4883E4F0            <1>  and rsp, ~15
  2975 00001DC3 E8(00000000)                    call printf
  2976                                          LEAVE
    49 00001DC8 C9                  <1>  leave
  2977 00001DC9 488B4528                        mov rax, PARAM(1)       ; sob_string
  2978 00001DCD BE01000000                      mov rsi, 1              ; size = 1 byte
  2979 00001DD2 488B5001                        mov rdx, qword [rax + 1] ; length
  2980 00001DD6 488D7809                        lea rdi, [rax + 1 + 8]   ; actual characters
  2981 00001DDA 488B0C25[00000000]              mov rcx, qword [stdout]  ; FILE*
  2982                                  	ENTER
    44 00001DE2 C8000000            <1>  enter 0, 0
    45 00001DE6 4883E4F0            <1>  and rsp, ~15
  2983 00001DEA E8(00000000)                    call fwrite
  2984                                  	LEAVE
    49 00001DEF C9                  <1>  leave
  2985 00001DF0 48BF-                           mov rdi, fmt_scheme_error_part_3
  2985 00001DF2 [E40E000000000000] 
  2986 00001DFA B800000000                      mov rax, 0
  2987                                          ENTER
    44 00001DFF C8000000            <1>  enter 0, 0
    45 00001E03 4883E4F0            <1>  and rsp, ~15
  2988 00001E07 E8(00000000)                    call printf
  2989                                          LEAVE
    49 00001E0C C9                  <1>  leave
  2990 00001E0D 48C7C0F7FFFFFF                  mov rax, -9
  2991 00001E14 E8(00000000)                    call exit
  2992                                  
  2993                                  L_code_ptr_raw_less_than_rr:
  2994 00001E19 C8000000                        enter 0, 0
  2995 00001E1D 48837D1802                      cmp COUNT, 2
  2996 00001E22 0F85C7060000                    jne L_error_arg_count_2
  2997 00001E28 488B7520                        mov rsi, PARAM(0)
  2998                                          assert_real(rsi)
    53 00001E2C 803E13              <1>  cmp byte [%1], %2
    54 00001E2F 0F8559070000        <1>  jne L_error_incorrect_type
  2999 00001E35 488B7D28                        mov rdi, PARAM(1)
  3000                                          assert_real(rdi)
    53 00001E39 803F13              <1>  cmp byte [%1], %2
    54 00001E3C 0F854C070000        <1>  jne L_error_incorrect_type
  3001 00001E42 F20F104601                      movsd xmm0, qword [rsi + 1]
  3002 00001E47 F20F104F01                      movsd xmm1, qword [rdi + 1]
  3003 00001E4C 660F2FC1                        comisd xmm0, xmm1
  3004 00001E50 730C                            jae .L_false
  3005 00001E52 48B8-                           mov rax, sob_boolean_true
  3005 00001E54 [0300000000000000] 
  3006 00001E5C EB0A                            jmp .L_exit
  3007                                  .L_false:
  3008 00001E5E 48B8-                           mov rax, sob_boolean_false
  3008 00001E60 [0200000000000000] 
  3009                                  .L_exit:
  3010 00001E68 C9                              leave
  3011 00001E69 C22000                          ret AND_KILL_FRAME(2)
  3012                                          
  3013                                  L_code_ptr_raw_less_than_zz:
  3014 00001E6C C8000000                	enter 0, 0
  3015 00001E70 48837D1802              	cmp COUNT, 2
  3016 00001E75 0F8574060000            	jne L_error_arg_count_2
  3017 00001E7B 4C8B4520                	mov r8, PARAM(0)
  3018                                  	assert_integer(r8)
    53 00001E7F 41803811            <1>  cmp byte [%1], %2
    54 00001E83 0F8505070000        <1>  jne L_error_incorrect_type
  3019 00001E89 4C8B4D28                	mov r9, PARAM(1)
  3020                                  	assert_integer(r9)
    53 00001E8D 41803911            <1>  cmp byte [%1], %2
    54 00001E91 0F85F7060000        <1>  jne L_error_incorrect_type
  3021 00001E97 498B7801                	mov rdi, qword [r8 + 1]
  3022 00001E9B 493B7901                	cmp rdi, qword [r9 + 1]
  3023 00001E9F 7D0C                    	jge .L_false
  3024 00001EA1 48B8-                   	mov rax, sob_boolean_true
  3024 00001EA3 [0300000000000000] 
  3025 00001EAB EB0A                    	jmp .L_exit
  3026                                  .L_false:
  3027 00001EAD 48B8-                   	mov rax, sob_boolean_false
  3027 00001EAF [0200000000000000] 
  3028                                  .L_exit:
  3029 00001EB7 C9                      	leave
  3030 00001EB8 C22000                  	ret AND_KILL_FRAME(2)
  3031                                  
  3032                                  L_code_ptr_raw_less_than_qq:
  3033 00001EBB C8000000                        enter 0, 0
  3034 00001EBF 48837D1802                      cmp COUNT, 2
  3035 00001EC4 0F8525060000                    jne L_error_arg_count_2
  3036 00001ECA 488B7520                        mov rsi, PARAM(0)
  3037                                          assert_fraction(rsi)
    53 00001ECE 803E12              <1>  cmp byte [%1], %2
    54 00001ED1 0F85B7060000        <1>  jne L_error_incorrect_type
  3038 00001ED7 488B7D28                        mov rdi, PARAM(1)
  3039                                          assert_fraction(rdi)
    53 00001EDB 803F12              <1>  cmp byte [%1], %2
    54 00001EDE 0F85AA060000        <1>  jne L_error_incorrect_type
  3040 00001EE4 488B4601                        mov rax, qword [rsi + 1] ; num1
  3041 00001EE8 4899                            cqo
  3042 00001EEA 48F76F09                        imul qword [rdi + 1 + 8] ; den2
  3043 00001EEE 4889C1                          mov rcx, rax
  3044 00001EF1 488B4609                        mov rax, qword [rsi + 1 + 8] ; den1
  3045 00001EF5 4899                            cqo
  3046 00001EF7 48F76F01                        imul qword [rdi + 1]          ; num2
  3047 00001EFB 4829C1                          sub rcx, rax
  3048 00001EFE 7D0C                            jge .L_false
  3049 00001F00 48B8-                           mov rax, sob_boolean_true
  3049 00001F02 [0300000000000000] 
  3050 00001F0A EB0A                            jmp .L_exit
  3051                                  .L_false:
  3052 00001F0C 48B8-                           mov rax, sob_boolean_false
  3052 00001F0E [0200000000000000] 
  3053                                  .L_exit:
  3054 00001F16 C9                              leave
  3055 00001F17 C22000                          ret AND_KILL_FRAME(2)
  3056                                  
  3057                                  L_code_ptr_raw_equal_rr:
  3058 00001F1A C8000000                        enter 0, 0
  3059 00001F1E 48837D1802                      cmp COUNT, 2
  3060 00001F23 0F85C6050000                    jne L_error_arg_count_2
  3061 00001F29 488B7520                        mov rsi, PARAM(0)
  3062                                          assert_real(rsi)
    53 00001F2D 803E13              <1>  cmp byte [%1], %2
    54 00001F30 0F8558060000        <1>  jne L_error_incorrect_type
  3063 00001F36 488B7D28                        mov rdi, PARAM(1)
  3064                                          assert_real(rdi)
    53 00001F3A 803F13              <1>  cmp byte [%1], %2
    54 00001F3D 0F854B060000        <1>  jne L_error_incorrect_type
  3065 00001F43 F20F104601                      movsd xmm0, qword [rsi + 1]
  3066 00001F48 F20F104F01                      movsd xmm1, qword [rdi + 1]
  3067 00001F4D 660F2FC1                        comisd xmm0, xmm1
  3068 00001F51 750C                            jne .L_false
  3069 00001F53 48B8-                           mov rax, sob_boolean_true
  3069 00001F55 [0300000000000000] 
  3070 00001F5D EB0A                            jmp .L_exit
  3071                                  .L_false:
  3072 00001F5F 48B8-                           mov rax, sob_boolean_false
  3072 00001F61 [0200000000000000] 
  3073                                  .L_exit:
  3074 00001F69 C9                              leave
  3075 00001F6A C22000                          ret AND_KILL_FRAME(2)
  3076                                          
  3077                                  L_code_ptr_raw_equal_zz:
  3078 00001F6D C8000000                	enter 0, 0
  3079 00001F71 48837D1802              	cmp COUNT, 2
  3080 00001F76 0F8573050000            	jne L_error_arg_count_2
  3081 00001F7C 4C8B4520                	mov r8, PARAM(0)
  3082                                  	assert_integer(r8)
    53 00001F80 41803811            <1>  cmp byte [%1], %2
    54 00001F84 0F8504060000        <1>  jne L_error_incorrect_type
  3083 00001F8A 4C8B4D28                	mov r9, PARAM(1)
  3084                                  	assert_integer(r9)
    53 00001F8E 41803911            <1>  cmp byte [%1], %2
    54 00001F92 0F85F6050000        <1>  jne L_error_incorrect_type
  3085 00001F98 498B7801                	mov rdi, qword [r8 + 1]
  3086 00001F9C 493B7901                	cmp rdi, qword [r9 + 1]
  3087 00001FA0 750C                    	jne .L_false
  3088 00001FA2 48B8-                   	mov rax, sob_boolean_true
  3088 00001FA4 [0300000000000000] 
  3089 00001FAC EB0A                    	jmp .L_exit
  3090                                  .L_false:
  3091 00001FAE 48B8-                   	mov rax, sob_boolean_false
  3091 00001FB0 [0200000000000000] 
  3092                                  .L_exit:
  3093 00001FB8 C9                      	leave
  3094 00001FB9 C22000                  	ret AND_KILL_FRAME(2)
  3095                                  
  3096                                  L_code_ptr_raw_equal_qq:
  3097 00001FBC C8000000                        enter 0, 0
  3098 00001FC0 48837D1802                      cmp COUNT, 2
  3099 00001FC5 0F8524050000                    jne L_error_arg_count_2
  3100 00001FCB 488B7520                        mov rsi, PARAM(0)
  3101                                          assert_fraction(rsi)
    53 00001FCF 803E12              <1>  cmp byte [%1], %2
    54 00001FD2 0F85B6050000        <1>  jne L_error_incorrect_type
  3102 00001FD8 488B7D28                        mov rdi, PARAM(1)
  3103                                          assert_fraction(rdi)
    53 00001FDC 803F12              <1>  cmp byte [%1], %2
    54 00001FDF 0F85A9050000        <1>  jne L_error_incorrect_type
  3104 00001FE5 488B4601                        mov rax, qword [rsi + 1] ; num1
  3105 00001FE9 4899                            cqo
  3106 00001FEB 48F76F09                        imul qword [rdi + 1 + 8] ; den2
  3107 00001FEF 4889C1                          mov rcx, rax
  3108 00001FF2 488B4709                        mov rax, qword [rdi + 1 + 8] ; den1
  3109 00001FF6 4899                            cqo
  3110 00001FF8 48F76F01                        imul qword [rdi + 1]          ; num2
  3111 00001FFC 4829C1                          sub rcx, rax
  3112 00001FFF 750C                            jne .L_false
  3113 00002001 48B8-                           mov rax, sob_boolean_true
  3113 00002003 [0300000000000000] 
  3114 0000200B EB0A                            jmp .L_exit
  3115                                  .L_false:
  3116 0000200D 48B8-                           mov rax, sob_boolean_false
  3116 0000200F [0200000000000000] 
  3117                                  .L_exit:
  3118 00002017 C9                              leave
  3119 00002018 C22000                          ret AND_KILL_FRAME(2)
  3120                                  
  3121                                  L_code_ptr_quotient:
  3122 0000201B C8000000                        enter 0, 0
  3123 0000201F 48837D1802                      cmp COUNT, 2
  3124 00002024 0F85C5040000                    jne L_error_arg_count_2
  3125 0000202A 488B7520                        mov rsi, PARAM(0)
  3126                                          assert_integer(rsi)
    53 0000202E 803E11              <1>  cmp byte [%1], %2
    54 00002031 0F8557050000        <1>  jne L_error_incorrect_type
  3127 00002037 488B7D28                        mov rdi, PARAM(1)
  3128                                          assert_integer(rdi)
    53 0000203B 803F11              <1>  cmp byte [%1], %2
    54 0000203E 0F854A050000        <1>  jne L_error_incorrect_type
  3129 00002044 488B4601                        mov rax, qword [rsi + 1]
  3130 00002048 488B5F01                        mov rbx, qword [rdi + 1]
  3131 0000204C 4883FB00                        cmp rbx, 0
  3132 00002050 0F8469050000                    je L_error_division_by_zero
  3133 00002056 4899                            cqo
  3134 00002058 48F7FB                          idiv rbx
  3135 0000205B 4889C7                          mov rdi, rax
  3136 0000205E E8D7030000                      call make_integer
  3137 00002063 C9                              leave
  3138 00002064 C22000                          ret AND_KILL_FRAME(2)
  3139                                          
  3140                                  L_code_ptr_remainder:
  3141 00002067 C8000000                        enter 0, 0
  3142 0000206B 48837D1802                      cmp COUNT, 2
  3143 00002070 0F8579040000                    jne L_error_arg_count_2
  3144 00002076 488B7520                        mov rsi, PARAM(0)
  3145                                          assert_integer(rsi)
    53 0000207A 803E11              <1>  cmp byte [%1], %2
    54 0000207D 0F850B050000        <1>  jne L_error_incorrect_type
  3146 00002083 488B7D28                        mov rdi, PARAM(1)
  3147                                          assert_integer(rdi)
    53 00002087 803F11              <1>  cmp byte [%1], %2
    54 0000208A 0F85FE040000        <1>  jne L_error_incorrect_type
  3148 00002090 488B4601                        mov rax, qword [rsi + 1]
  3149 00002094 488B5F01                        mov rbx, qword [rdi + 1]
  3150 00002098 4883FB00                        cmp rbx, 0
  3151 0000209C 0F841D050000                    je L_error_division_by_zero
  3152 000020A2 4899                            cqo
  3153 000020A4 48F7FB                          idiv rbx
  3154 000020A7 4889D7                          mov rdi, rdx
  3155 000020AA E88B030000                      call make_integer
  3156 000020AF C9                              leave
  3157 000020B0 C22000                          ret AND_KILL_FRAME(2)
  3158                                  
  3159                                  L_code_ptr_set_car:
  3160 000020B3 C8000000                        enter 0, 0
  3161 000020B7 48837D1802                      cmp COUNT, 2
  3162 000020BC 0F852D040000                    jne L_error_arg_count_2
  3163 000020C2 488B4520                        mov rax, PARAM(0)
  3164                                          assert_pair(rax)
    53 000020C6 803821              <1>  cmp byte [%1], %2
    54 000020C9 0F85BF040000        <1>  jne L_error_incorrect_type
  3165 000020CF 488B5D28                        mov rbx, PARAM(1)
  3166 000020D3 48895801                        mov SOB_PAIR_CAR(rax), rbx
  3167 000020D7 48B8-                           mov rax, sob_void
  3167 000020D9 [0000000000000000] 
  3168 000020E1 C9                              leave
  3169 000020E2 C22000                          ret AND_KILL_FRAME(2)
  3170                                  
  3171                                  L_code_ptr_set_cdr:
  3172 000020E5 C8000000                        enter 0, 0
  3173 000020E9 48837D1802                      cmp COUNT, 2
  3174 000020EE 0F85FB030000                    jne L_error_arg_count_2
  3175 000020F4 488B4520                        mov rax, PARAM(0)
  3176                                          assert_pair(rax)
    53 000020F8 803821              <1>  cmp byte [%1], %2
    54 000020FB 0F858D040000        <1>  jne L_error_incorrect_type
  3177 00002101 488B5D28                        mov rbx, PARAM(1)
  3178 00002105 48895809                        mov SOB_PAIR_CDR(rax), rbx
  3179 00002109 48B8-                           mov rax, sob_void
  3179 0000210B [0000000000000000] 
  3180 00002113 C9                              leave
  3181 00002114 C22000                          ret AND_KILL_FRAME(2)
  3182                                  
  3183                                  L_code_ptr_string_ref:
  3184 00002117 C8000000                        enter 0, 0
  3185 0000211B 48837D1802                      cmp COUNT, 2
  3186 00002120 0F85C9030000                    jne L_error_arg_count_2
  3187 00002126 488B7D20                        mov rdi, PARAM(0)
  3188                                          assert_string(rdi)
    53 0000212A 803F03              <1>  cmp byte [%1], %2
    54 0000212D 0F855B040000        <1>  jne L_error_incorrect_type
  3189 00002133 488B7528                        mov rsi, PARAM(1)
  3190                                          assert_integer(rsi)
    53 00002137 803E11              <1>  cmp byte [%1], %2
    54 0000213A 0F854E040000        <1>  jne L_error_incorrect_type
  3191 00002140 488B5701                        mov rdx, qword [rdi + 1]
  3192 00002144 488B4E01                        mov rcx, qword [rsi + 1]
  3193 00002148 4839D1                          cmp rcx, rdx
  3194 0000214B 0F8D03030000                    jge L_error_integer_range
  3195 00002151 4883F900                        cmp rcx, 0
  3196 00002155 0F8CF9020000                    jl L_error_integer_range
  3197 0000215B 8A5C3909                        mov bl, byte [rdi + 1 + 8 + 1 * rcx]
  3198 0000215F BF02000000                      mov rdi, 2
  3199 00002164 E8FFE7FFFF                      call malloc
  3200 00002169 C60002                          mov byte [rax], T_char
  3201 0000216C 885801                          mov byte [rax + 1], bl
  3202 0000216F C9                              leave
  3203 00002170 C22000                          ret AND_KILL_FRAME(2)
  3204                                  
  3205                                  L_code_ptr_vector_ref:
  3206 00002173 C8000000                        enter 0, 0
  3207 00002177 48837D1802                      cmp COUNT, 2
  3208 0000217C 0F856D030000                    jne L_error_arg_count_2
  3209 00002182 488B7D20                        mov rdi, PARAM(0)
  3210                                          assert_vector(rdi)
    53 00002186 803F22              <1>  cmp byte [%1], %2
    54 00002189 0F85FF030000        <1>  jne L_error_incorrect_type
  3211 0000218F 488B7528                        mov rsi, PARAM(1)
  3212                                          assert_integer(rsi)
    53 00002193 803E11              <1>  cmp byte [%1], %2
    54 00002196 0F85F2030000        <1>  jne L_error_incorrect_type
  3213 0000219C 488B5701                        mov rdx, qword [rdi + 1]
  3214 000021A0 488B4E01                        mov rcx, qword [rsi + 1]
  3215 000021A4 4839D1                          cmp rcx, rdx
  3216 000021A7 0F8DA7020000                    jge L_error_integer_range
  3217 000021AD 4883F900                        cmp rcx, 0
  3218 000021B1 0F8C9D020000                    jl L_error_integer_range
  3219 000021B7 488B44CF09                      mov rax, [rdi + 1 + 8 + 8 * rcx]
  3220 000021BC C9                              leave
  3221 000021BD C22000                          ret AND_KILL_FRAME(2)
  3222                                  
  3223                                  L_code_ptr_vector_set:
  3224 000021C0 C8000000                        enter 0, 0
  3225 000021C4 48837D1803                      cmp COUNT, 3
  3226 000021C9 0F858A030000                    jne L_error_arg_count_3
  3227 000021CF 488B7D20                        mov rdi, PARAM(0)
  3228                                          assert_vector(rdi)
    53 000021D3 803F22              <1>  cmp byte [%1], %2
    54 000021D6 0F85B2030000        <1>  jne L_error_incorrect_type
  3229 000021DC 488B7528                        mov rsi, PARAM(1)
  3230                                          assert_integer(rsi)
    53 000021E0 803E11              <1>  cmp byte [%1], %2
    54 000021E3 0F85A5030000        <1>  jne L_error_incorrect_type
  3231 000021E9 488B5701                        mov rdx, qword [rdi + 1]
  3232 000021ED 488B4E01                        mov rcx, qword [rsi + 1]
  3233 000021F1 4839D1                          cmp rcx, rdx
  3234 000021F4 0F8D5A020000                    jge L_error_integer_range
  3235 000021FA 4883F900                        cmp rcx, 0
  3236 000021FE 0F8C50020000                    jl L_error_integer_range
  3237 00002204 488B4530                        mov rax, PARAM(2)
  3238 00002208 488944CF09                      mov qword [rdi + 1 + 8 + 8 * rcx], rax
  3239 0000220D 48B8-                           mov rax, sob_void
  3239 0000220F [0000000000000000] 
  3240 00002217 C9                              leave
  3241 00002218 C22800                          ret AND_KILL_FRAME(3)
  3242                                  
  3243                                  L_code_ptr_string_set:
  3244 0000221B C8000000                        enter 0, 0
  3245 0000221F 48837D1803                      cmp COUNT, 3
  3246 00002224 0F852F030000                    jne L_error_arg_count_3
  3247 0000222A 488B7D20                        mov rdi, PARAM(0)
  3248                                          assert_string(rdi)
    53 0000222E 803F03              <1>  cmp byte [%1], %2
    54 00002231 0F8557030000        <1>  jne L_error_incorrect_type
  3249 00002237 488B7528                        mov rsi, PARAM(1)
  3250                                          assert_integer(rsi)
    53 0000223B 803E11              <1>  cmp byte [%1], %2
    54 0000223E 0F854A030000        <1>  jne L_error_incorrect_type
  3251 00002244 488B5701                        mov rdx, qword [rdi + 1]
  3252 00002248 488B4E01                        mov rcx, qword [rsi + 1]
  3253 0000224C 4839D1                          cmp rcx, rdx
  3254 0000224F 0F8DFF010000                    jge L_error_integer_range
  3255 00002255 4883F900                        cmp rcx, 0
  3256 00002259 0F8CF5010000                    jl L_error_integer_range
  3257 0000225F 488B4530                        mov rax, PARAM(2)
  3258                                          assert_char(rax)
    53 00002263 803802              <1>  cmp byte [%1], %2
    54 00002266 0F8522030000        <1>  jne L_error_incorrect_type
  3259 0000226C 8A4001                          mov al, byte [rax + 1]
  3260 0000226F 88443909                        mov byte [rdi + 1 + 8 + 1 * rcx], al
  3261 00002273 48B8-                           mov rax, sob_void
  3261 00002275 [0000000000000000] 
  3262 0000227D C9                              leave
  3263 0000227E C22800                          ret AND_KILL_FRAME(3)
  3264                                  
  3265                                  L_code_ptr_make_vector:
  3266 00002281 C8000000                        enter 0, 0
  3267 00002285 48837D1802                      cmp COUNT, 2
  3268 0000228A 0F855F020000                    jne L_error_arg_count_2
  3269 00002290 488B4D20                        mov rcx, PARAM(0)
  3270                                          assert_integer(rcx)
    53 00002294 803911              <1>  cmp byte [%1], %2
    54 00002297 0F85F1020000        <1>  jne L_error_incorrect_type
  3271 0000229D 488B4901                        mov rcx, qword [rcx + 1]
  3272 000022A1 4883F900                        cmp rcx, 0
  3273 000022A5 0F8CA9010000                    jl L_error_integer_range
  3274 000022AB 488B5528                        mov rdx, PARAM(1)
  3275 000022AF 488D3CCD09000000                lea rdi, [1 + 8 + 8 * rcx]
  3276 000022B7 E8ACE6FFFF                      call malloc
  3277 000022BC C60022                          mov byte [rax], T_vector
  3278 000022BF 48894801                        mov qword [rax + 1], rcx
  3279 000022C3 41B800000000                    mov r8, 0
  3280                                  .L0:
  3281 000022C9 4939C8                          cmp r8, rcx
  3282 000022CC 740A                            je .L1
  3283 000022CE 4A8954C009                      mov qword [rax + 1 + 8 + 8 * r8], rdx
  3284 000022D3 49FFC0                          inc r8
  3285 000022D6 EBF1                            jmp .L0
  3286                                  .L1:
  3287 000022D8 C9                              leave
  3288 000022D9 C22000                          ret AND_KILL_FRAME(2)
  3289                                          
  3290                                  L_code_ptr_make_string:
  3291 000022DC C8000000                        enter 0, 0
  3292 000022E0 48837D1802                      cmp COUNT, 2
  3293 000022E5 0F8504020000                    jne L_error_arg_count_2
  3294 000022EB 488B4D20                        mov rcx, PARAM(0)
  3295                                          assert_integer(rcx)
    53 000022EF 803911              <1>  cmp byte [%1], %2
    54 000022F2 0F8596020000        <1>  jne L_error_incorrect_type
  3296 000022F8 488B4901                        mov rcx, qword [rcx + 1]
  3297 000022FC 4883F900                        cmp rcx, 0
  3298 00002300 0F8C4E010000                    jl L_error_integer_range
  3299 00002306 488B5528                        mov rdx, PARAM(1)
  3300                                          assert_char(rdx)
    53 0000230A 803A02              <1>  cmp byte [%1], %2
    54 0000230D 0F857B020000        <1>  jne L_error_incorrect_type
  3301 00002313 8A5201                          mov dl, byte [rdx + 1]
  3302 00002316 488D7909                        lea rdi, [1 + 8 + 1 * rcx]
  3303 0000231A E849E6FFFF                      call malloc
  3304 0000231F C60003                          mov byte [rax], T_string
  3305 00002322 48894801                        mov qword [rax + 1], rcx
  3306 00002326 41B800000000                    mov r8, 0
  3307                                  .L0:
  3308 0000232C 4939C8                          cmp r8, rcx
  3309 0000232F 740A                            je .L1
  3310 00002331 4188540009                      mov byte [rax + 1 + 8 + 1 * r8], dl
  3311 00002336 49FFC0                          inc r8
  3312 00002339 EBF1                            jmp .L0
  3313                                  .L1:
  3314 0000233B C9                              leave
  3315 0000233C C22000                          ret AND_KILL_FRAME(2)
  3316                                  
  3317                                  L_code_ptr_numerator:
  3318 0000233F C8000000                        enter 0, 0
  3319 00002343 48837D1801                      cmp COUNT, 1
  3320 00002348 0F856C010000                    jne L_error_arg_count_1
  3321 0000234E 488B4520                        mov rax, PARAM(0)
  3322                                          assert_fraction(rax)
    53 00002352 803812              <1>  cmp byte [%1], %2
    54 00002355 0F8533020000        <1>  jne L_error_incorrect_type
  3323 0000235B 488B7801                        mov rdi, qword [rax + 1]
  3324 0000235F E8D6000000                      call make_integer
  3325 00002364 C9                              leave
  3326 00002365 C21800                          ret AND_KILL_FRAME(1)
  3327                                          
  3328                                  L_code_ptr_denominator:
  3329 00002368 C8000000                        enter 0, 0
  3330 0000236C 48837D1801                      cmp COUNT, 1
  3331 00002371 0F8543010000                    jne L_error_arg_count_1
  3332 00002377 488B4520                        mov rax, PARAM(0)
  3333                                          assert_fraction(rax)
    53 0000237B 803812              <1>  cmp byte [%1], %2
    54 0000237E 0F850A020000        <1>  jne L_error_incorrect_type
  3334 00002384 488B7809                        mov rdi, qword [rax + 1 + 8]
  3335 00002388 E8AD000000                      call make_integer
  3336 0000238D C9                              leave
  3337 0000238E C21800                          ret AND_KILL_FRAME(1)
  3338                                  
  3339                                  L_code_ptr_is_eq:
  3340 00002391 C8000000                	enter 0, 0
  3341 00002395 48837D1802              	cmp COUNT, 2
  3342 0000239A 0F854F010000            	jne L_error_arg_count_2
  3343 000023A0 488B7D20                	mov rdi, PARAM(0)
  3344 000023A4 488B7528                	mov rsi, PARAM(1)
  3345 000023A8 4839F7                  	cmp rdi, rsi
  3346 000023AB 745B                    	je .L_eq_true
  3347 000023AD 8A17                    	mov dl, byte [rdi]
  3348 000023AF 3A16                    	cmp dl, byte [rsi]
  3349 000023B1 7561                    	jne .L_eq_false
  3350 000023B3 80FA02                  	cmp dl, T_char
  3351 000023B6 7448                    	je .L_char
  3352 000023B8 80FA41                  	cmp dl, T_interned_symbol
  3353 000023BB 742F                    	je .L_interned_symbol
  3354 000023BD 80FA42                          cmp dl, T_uninterned_symbol
  3355 000023C0 7432                            je .L_uninterned_symbol
  3356 000023C2 80FA13                  	cmp dl, T_real
  3357 000023C5 741D                    	je .L_real
  3358 000023C7 80FA12                  	cmp dl, T_fraction
  3359 000023CA 7402                    	je .L_fraction
  3360 000023CC EB46                    	jmp .L_eq_false
  3361                                  .L_fraction:
  3362 000023CE 488B4601                	mov rax, qword [rsi + 1]
  3363 000023D2 483B4701                	cmp rax, qword [rdi + 1]
  3364 000023D6 753C                    	jne .L_eq_false
  3365 000023D8 488B4609                	mov rax, qword [rsi + 1 + 8]
  3366 000023DC 483B4709                	cmp rax, qword [rdi + 1 + 8]
  3367 000023E0 7532                    	jne .L_eq_false
  3368 000023E2 EB24                    	jmp .L_eq_true
  3369                                  .L_real:
  3370 000023E4 488B4601                	mov rax, qword [rsi + 1]
  3371 000023E8 483B4701                	cmp rax, qword [rdi + 1]
  3372                                  .L_interned_symbol:
  3373                                  	; never reached, because interned_symbols are static!
  3374                                  	; but I'm keeping it in case, I'll ever change
  3375                                  	; the implementation
  3376 000023EC 488B4601                	mov rax, qword [rsi + 1]
  3377 000023F0 483B4701                	cmp rax, qword [rdi + 1]
  3378                                  .L_uninterned_symbol:
  3379 000023F4 4C8B4701                        mov r8, qword [rdi + 1]
  3380 000023F8 4C3B4601                        cmp r8, qword [rsi + 1]
  3381 000023FC 7516                            jne .L_eq_false
  3382 000023FE EB08                            jmp .L_eq_true
  3383                                  .L_char:
  3384 00002400 8A5E01                  	mov bl, byte [rsi + 1]
  3385 00002403 3A5F01                  	cmp bl, byte [rdi + 1]
  3386 00002406 750C                    	jne .L_eq_false
  3387                                  .L_eq_true:
  3388 00002408 48B8-                   	mov rax, sob_boolean_true
  3388 0000240A [0300000000000000] 
  3389 00002412 EB0A                    	jmp .L_eq_exit
  3390                                  .L_eq_false:
  3391 00002414 48B8-                   	mov rax, sob_boolean_false
  3391 00002416 [0200000000000000] 
  3392                                  .L_eq_exit:
  3393 0000241E C9                      	leave
  3394 0000241F C22000                  	ret AND_KILL_FRAME(2)
  3395                                  
  3396                                  make_real:
  3397 00002422 C8000000                        enter 0, 0
  3398 00002426 BF09000000                      mov rdi, (1 + 8)
  3399 0000242B E838E5FFFF                      call malloc
  3400 00002430 C60013                          mov byte [rax], T_real
  3401 00002433 F20F114001                      movsd qword [rax + 1], xmm0
  3402 00002438 C9                              leave 
  3403 00002439 C3                              ret
  3404                                          
  3405                                  make_integer:
  3406 0000243A C8000000                        enter 0, 0
  3407 0000243E 4889FE                          mov rsi, rdi
  3408 00002441 BF09000000                      mov rdi, (1 + 8)
  3409 00002446 E81DE5FFFF                      call malloc
  3410 0000244B C60011                          mov byte [rax], T_integer
  3411 0000244E 48897001                        mov qword [rax + 1], rsi
  3412 00002452 C9                              leave
  3413 00002453 C3                              ret
  3414                                          
  3415                                  L_error_integer_range:
  3416 00002454 488B3C25[00000000]              mov rdi, qword [stderr]
  3417 0000245C 48BE-                           mov rsi, fmt_integer_range
  3417 0000245E [5B0E000000000000] 
  3418 00002466 B800000000                      mov rax, 0
  3419                                          ENTER
    44 0000246B C8000000            <1>  enter 0, 0
    45 0000246F 4883E4F0            <1>  and rsp, ~15
  3420 00002473 E8(00000000)                    call fprintf
  3421                                          LEAVE
    49 00002478 C9                  <1>  leave
  3422 00002479 48C7C0FBFFFFFF                  mov rax, -5
  3423 00002480 E8(00000000)                    call exit
  3424                                  
  3425                                  L_error_arg_count_0:
  3426 00002485 488B3C25[00000000]              mov rdi, qword [stderr]
  3427 0000248D 48BE-                           mov rsi, fmt_arg_count_0
  3427 0000248F [590D000000000000] 
  3428 00002497 488B5518                        mov rdx, COUNT
  3429 0000249B B800000000                      mov rax, 0
  3430                                          ENTER
    44 000024A0 C8000000            <1>  enter 0, 0
    45 000024A4 4883E4F0            <1>  and rsp, ~15
  3431 000024A8 E8(00000000)                    call fprintf
  3432                                          LEAVE
    49 000024AD C9                  <1>  leave
  3433 000024AE 48C7C0FDFFFFFF                  mov rax, -3
  3434 000024B5 E8(00000000)                    call exit
  3435                                  
  3436                                  L_error_arg_count_1:
  3437 000024BA 488B3C25[00000000]              mov rdi, qword [stderr]
  3438 000024C2 48BE-                           mov rsi, fmt_arg_count_1
  3438 000024C4 [810D000000000000] 
  3439 000024CC 488B5518                        mov rdx, COUNT
  3440 000024D0 B800000000                      mov rax, 0
  3441                                          ENTER
    44 000024D5 C8000000            <1>  enter 0, 0
    45 000024D9 4883E4F0            <1>  and rsp, ~15
  3442 000024DD E8(00000000)                    call fprintf
  3443                                          LEAVE
    49 000024E2 C9                  <1>  leave
  3444 000024E3 48C7C0FDFFFFFF                  mov rax, -3
  3445 000024EA E8(00000000)                    call exit
  3446                                  
  3447                                  L_error_arg_count_2:
  3448 000024EF 488B3C25[00000000]              mov rdi, qword [stderr]
  3449 000024F7 48BE-                           mov rsi, fmt_arg_count_2
  3449 000024F9 [E70D000000000000] 
  3450 00002501 488B5518                        mov rdx, COUNT
  3451 00002505 B800000000                      mov rax, 0
  3452                                          ENTER
    44 0000250A C8000000            <1>  enter 0, 0
    45 0000250E 4883E4F0            <1>  and rsp, ~15
  3453 00002512 E8(00000000)                    call fprintf
  3454                                          LEAVE
    49 00002517 C9                  <1>  leave
  3455 00002518 48C7C0FDFFFFFF                  mov rax, -3
  3456 0000251F E8(00000000)                    call exit
  3457                                  
  3458                                  L_error_arg_count_12:
  3459 00002524 488B3C25[00000000]              mov rdi, qword [stderr]
  3460 0000252C 48BE-                           mov rsi, fmt_arg_count_12
  3460 0000252E [A70D000000000000] 
  3461 00002536 488B5518                        mov rdx, COUNT
  3462 0000253A B800000000                      mov rax, 0
  3463                                          ENTER
    44 0000253F C8000000            <1>  enter 0, 0
    45 00002543 4883E4F0            <1>  and rsp, ~15
  3464 00002547 E8(00000000)                    call fprintf
  3465                                          LEAVE
    49 0000254C C9                  <1>  leave
  3466 0000254D 48C7C0FDFFFFFF                  mov rax, -3
  3467 00002554 E8(00000000)                    call exit
  3468                                  
  3469                                  L_error_arg_count_3:
  3470 00002559 488B3C25[00000000]              mov rdi, qword [stderr]
  3471 00002561 48BE-                           mov rsi, fmt_arg_count_3
  3471 00002563 [0E0E000000000000] 
  3472 0000256B 488B5518                        mov rdx, COUNT
  3473 0000256F B800000000                      mov rax, 0
  3474                                          ENTER
    44 00002574 C8000000            <1>  enter 0, 0
    45 00002578 4883E4F0            <1>  and rsp, ~15
  3475 0000257C E8(00000000)                    call fprintf
  3476                                          LEAVE
    49 00002581 C9                  <1>  leave
  3477 00002582 48C7C0FDFFFFFF                  mov rax, -3
  3478 00002589 E8(00000000)                    call exit
  3479                                          
  3480                                  L_error_incorrect_type:
  3481 0000258E 488B3C25[00000000]              mov rdi, qword [stderr]
  3482 00002596 48BE-                           mov rsi, fmt_type
  3482 00002598 [370E000000000000] 
  3483 000025A0 B800000000                      mov rax, 0
  3484                                          ENTER
    44 000025A5 C8000000            <1>  enter 0, 0
    45 000025A9 4883E4F0            <1>  and rsp, ~15
  3485 000025AD E8(00000000)                    call fprintf
  3486                                          LEAVE
    49 000025B2 C9                  <1>  leave
  3487 000025B3 48C7C0FCFFFFFF                  mov rax, -4
  3488 000025BA E8(00000000)                    call exit
  3489                                  
  3490                                  L_error_division_by_zero:
  3491 000025BF 488B3C25[00000000]              mov rdi, qword [stderr]
  3492 000025C7 48BE-                           mov rsi, fmt_division_by_zero
  3492 000025C9 [780E000000000000] 
  3493 000025D1 B800000000                      mov rax, 0
  3494                                          ENTER
    44 000025D6 C8000000            <1>  enter 0, 0
    45 000025DA 4883E4F0            <1>  and rsp, ~15
  3495 000025DE E8(00000000)                    call fprintf
  3496                                          LEAVE
    49 000025E3 C9                  <1>  leave
  3497 000025E4 48C7C0F8FFFFFF                  mov rax, -8
  3498 000025EB E8(00000000)                    call exit
  3499                                  
  3500                                  section .data
  3501                                  gensym_count:
  3502 00000D4E 0000000000000000                dq 0
  3503                                  fmt_char:
  3504 00000D56 256300                          db `%c\0`
  3505                                  fmt_arg_count_0:
  3506 00000D59 212121204578706563-             db `!!! Expecting zero arguments. Found %d\n\0`
  3506 00000D62 74696E67207A65726F-
  3506 00000D6B 20617267756D656E74-
  3506 00000D74 732E20466F756E6420-
  3506 00000D7D 25640A00           
  3507                                  fmt_arg_count_1:
  3508 00000D81 212121204578706563-             db `!!! Expecting one argument. Found %d\n\0`
  3508 00000D8A 74696E67206F6E6520-
  3508 00000D93 617267756D656E742E-
  3508 00000D9C 20466F756E64202564-
  3508 00000DA5 0A00               
  3509                                  fmt_arg_count_12:
  3510 00000DA7 212121204578706563-             db `!!! Expecting one required and one optional argument. Found %d\n\0`
  3510 00000DB0 74696E67206F6E6520-
  3510 00000DB9 726571756972656420-
  3510 00000DC2 616E64206F6E65206F-
  3510 00000DCB 7074696F6E616C2061-
  3510 00000DD4 7267756D656E742E20-
  3510 00000DDD 466F756E642025640A-
  3510 00000DE6 00                 
  3511                                  fmt_arg_count_2:
  3512 00000DE7 212121204578706563-             db `!!! Expecting two arguments. Found %d\n\0`
  3512 00000DF0 74696E672074776F20-
  3512 00000DF9 617267756D656E7473-
  3512 00000E02 2E20466F756E642025-
  3512 00000E0B 640A00             
  3513                                  fmt_arg_count_3:
  3514 00000E0E 212121204578706563-             db `!!! Expecting three arguments. Found %d\n\0`
  3514 00000E17 74696E672074687265-
  3514 00000E20 6520617267756D656E-
  3514 00000E29 74732E20466F756E64-
  3514 00000E32 2025640A00         
  3515                                  fmt_type:
  3516 00000E37 2121212046756E6374-             db `!!! Function passed incorrect type\n\0`
  3516 00000E40 696F6E207061737365-
  3516 00000E49 6420696E636F727265-
  3516 00000E52 637420747970650A00 
  3517                                  fmt_integer_range:
  3518 00000E5B 21212120496E636F72-             db `!!! Incorrect integer range\n\0`
  3518 00000E64 7265637420696E7465-
  3518 00000E6D 6765722072616E6765-
  3518 00000E76 0A00               
  3519                                  fmt_division_by_zero:
  3520 00000E78 212121204469766973-             db `!!! Division by zero\n\0`
  3520 00000E81 696F6E206279207A65-
  3520 00000E8A 726F0A00           
  3521                                  fmt_scheme_error_part_1:
  3522 00000E8E 0A2121212054686520-             db `\n!!! The procedure \0`
  3522 00000E97 70726F636564757265-
  3522 00000EA0 2000               
  3523                                  fmt_scheme_error_part_2:
  3524 00000EA2 2061736B656420746F-             db ` asked to terminate the program\n`
  3524 00000EAB 207465726D696E6174-
  3524 00000EB4 65207468652070726F-
  3524 00000EBD 6772616D0A         
  3525 00000EC2 202020207769746820-             db `    with the following message:\n\n\0`
  3525 00000ECB 74686520666F6C6C6F-
  3525 00000ED4 77696E67206D657373-
  3525 00000EDD 6167653A0A0A00     
  3526                                  fmt_scheme_error_part_3:
  3527 00000EE4 0A0A476F6F64627965-             db `\n\nGoodbye!\n\n\0`
  3527 00000EED 210A0A00           
